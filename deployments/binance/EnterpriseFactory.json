{
  "address": "0xa0204D8885b1D491a1b30338Ce8dFFb17f1DBDDf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "enterpriseImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "powerTokenImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestTokenImpl",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowTokenImpl",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployed",
          "type": "address"
        }
      ],
      "name": "EnterpriseDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "contract IERC20Metadata",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "baseUri",
          "type": "string"
        },
        {
          "internalType": "uint16",
          "name": "gcFeePercent",
          "type": "uint16"
        },
        {
          "internalType": "contract IConverter",
          "name": "converter",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "contract Enterprise",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ProxyAdmin",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "deployService",
      "outputs": [
        {
          "internalType": "contract PowerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowTokenImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnterpriseImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterestTokenImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPowerTokenImpl",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x24782cdb559dd921e5179d0240a5ceae51a6bbda36a1d85e121fdd6f3cc99745",
  "receipt": {
    "to": null,
    "from": "0x20535A14f20C92287EC093d09b60E97bd6683838",
    "contractAddress": "0xa0204D8885b1D491a1b30338Ce8dFFb17f1DBDDf",
    "transactionIndex": 104,
    "gasUsed": "1931298",
    "logsBloom": "0x
    "blockHash": "0xb1a720bbc2463dfaa24242d4395ad2b054917b004db570e35e72a182e65ae1db",
    "transactionHash": "0x24782cdb559dd921e5179d0240a5ceae51a6bbda36a1d85e121fdd6f3cc99745",
    "logs": [],
    "blockNumber": 8746292,
    "cumulativeGasUsed": "20522398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xad7Ddf106AFCF28F5eB9aC40A1Ab82c5EdF3B678",
    "0x9d195044F1fd60dEcAe27666d301a6CbB1Ae30d5",
    "0x52E166c6E682296E315C3677A8FC93Efc29aca24",
    "0xd64571A41f4D526Fc0cceb7683a8D376Dd76d7B1"
  ],
  "solcInputHash": "a469f38498f6c7a2ecf96e9707df965d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"enterpriseImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"powerTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowTokenImpl\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployed\",\"type\":\"address\"}],\"name\":\"EnterpriseDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"contract IERC20Metadata\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"baseUri\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"gcFeePercent\",\"type\":\"uint16\"},{\"internalType\":\"contract IConverter\",\"name\":\"converter\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"contract Enterprise\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ProxyAdmin\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"deployService\",\"outputs\":[{\"internalType\":\"contract PowerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnterpriseImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterestTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPowerTokenImpl\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EnterpriseFactory.sol\":\"EnterpriseFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xca2eb23a188f213d914fad982985d07e491dbc9960a387d4469bfce5c48911b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(address newImplementation, bytes memory data, bool forceCall) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            Address.functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\n                    \\\"upgradeTo(address)\\\",\\n                    oldImplementation\\n                )\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _setImplementation(newImplementation);\\n            emit Upgraded(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(\\n            Address.isContract(newBeacon),\\n            \\\"ERC1967: new beacon is not a contract\\\"\\n        );\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n}\\n\",\"keccak256\":\"0x91a577fa9cbb3fda527eefa0e4ab327bbd9949bf5d358be286a33623ed69f76d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0xc706395df88dc1d459f21e51c57ab8820af80d1e8c3c14933a651794d78a429f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5615339d191e77be7e46319b67856f9355786f705b7b3c4a7237ab70c1864ab1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\nimport \\\"../../access/Ownable.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x49f0dcfe49741443c2394e4eb828f5cc446dad4054406880a98de2516dd63b04\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967Proxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _changeAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _getAdmin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        _changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeToAndCall(newImplementation, bytes(\\\"\\\"), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\\n        _upgradeToAndCall(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address) {\\n        return _getAdmin();\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _getAdmin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x2c97daaa5c0e496bd49b882abfeadb6574f8b840b1d43e5003b9dd3e204ea284\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xc1c941ad1e580b4623007305921efe2f26fc7320a4edc226234dd707c658a428\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xccb7e6475afcb1c5cb13b3fbf1329c10b93620a9b66393388066683915271a78\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb8d11e77eb1ed34a33720edb551d7d6a6b0eee2bfaa40a7024020e1fdf879b16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d15d280d1f868f59a8264dc73f7ea8c51f10d78aac864b2f2ad29412d187ff5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n\\n        mapping (bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0xefd5694c5e32907810d3bcb301166c409b559d452777b0de9b155fc3d1671ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x4878ef6c288f4cef3c2a288d32cc548c648831cc55503ad3d9a581ed3b93aad9\",\"license\":\"MIT\"},\"contracts/BorrowToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IBorrowToken.sol\\\";\\nimport \\\"./Enterprise.sol\\\";\\nimport \\\"./EnterpriseOwnable.sol\\\";\\nimport \\\"./token/ERC721Enumerable.sol\\\";\\n\\ncontract BorrowToken is IBorrowToken, EnterpriseOwnable, ERC721Enumerable {\\n    using SafeERC20 for IERC20;\\n    uint256 private _tokenIdTracker;\\n\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        Enterprise enterprise\\n    ) external {\\n        EnterpriseOwnable.initialize(enterprise);\\n        ERC721.initialize(name, symbol);\\n    }\\n\\n    function getNextTokenId() public view override returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"b\\\", address(this), _tokenIdTracker)));\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        string memory baseURI = getEnterprise().getBaseUri();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, \\\"borrow/\\\")) : \\\"\\\";\\n    }\\n\\n    function mint(address to) external override onlyEnterprise returns (uint256) {\\n        uint256 tokenId = getNextTokenId();\\n        _safeMint(to, tokenId);\\n        _tokenIdTracker++;\\n        return tokenId;\\n    }\\n\\n    function burn(uint256 tokenId, address burner) external override onlyEnterprise {\\n        Enterprise enterprise = getEnterprise();\\n        Enterprise.LoanInfo memory loan = enterprise.getLoanInfo(tokenId);\\n        IERC20 paymentToken = IERC20(enterprise.paymentToken(loan.gcFeeTokenIndex));\\n        paymentToken.safeTransfer(burner, loan.gcFee);\\n\\n        _burn(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n        getEnterprise().loanTransfer(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x90e26b12d56b018573e82e9dfeaed152b112c7c7e2fbfbb7561f194811562dfc\",\"license\":\"UNLICENSED\"},\"contracts/Enterprise.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interfaces/IInterestToken.sol\\\";\\nimport \\\"./interfaces/IBorrowToken.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./interfaces/IPowerToken.sol\\\";\\nimport \\\"./EnterpriseStorage.sol\\\";\\n\\ncontract Enterprise is EnterpriseStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    enum LiquidityChangeType { WithdrawInterest, Add, Remove, Increase, Decrease }\\n\\n    event LiquidityChanged(uint256 indexed interestTokenId, LiquidityChangeType indexed changeType, uint256 amount);\\n    event ServiceRegistered(address indexed powerToken);\\n    event Borrowed(address indexed powerToken, uint256 indexed borrowTokenId);\\n    event LoanReturned(uint256 indexed borrowTokenId);\\n\\n    function registerService(\\n        string memory serviceName,\\n        string memory symbol,\\n        uint32 gapHalvingPeriod,\\n        uint112 baseRate,\\n        IERC20Metadata baseToken,\\n        uint16 serviceFeePercent,\\n        uint32 minLoanDuration,\\n        uint32 maxLoanDuration,\\n        uint96 minGCFee,\\n        bool allowsPerpetualTokensForever\\n    ) external onlyOwner notShutdown {\\n        require(address(baseToken) != address(0), Errors.E_INVALID_BASE_TOKEN_ADDRESS);\\n        require(_powerTokens.length < type(uint16).max, Errors.E_SERVICE_LIMIT_REACHED);\\n\\n        PowerToken powerToken = _factory.deployService(getProxyAdmin());\\n        {\\n            string memory tokenSymbol = _liquidityToken.symbol();\\n            string memory powerTokenSymbol = string(abi.encodePacked(tokenSymbol, \\\" \\\", symbol));\\n            powerToken.initialize(serviceName, powerTokenSymbol, _liquidityToken.decimals());\\n        }\\n        powerToken.initialize(\\n            this,\\n            baseRate,\\n            minGCFee,\\n            gapHalvingPeriod,\\n            uint16(_powerTokens.length),\\n            baseToken,\\n            minLoanDuration,\\n            maxLoanDuration,\\n            serviceFeePercent,\\n            allowsPerpetualTokensForever\\n        );\\n        _powerTokens.push(powerToken);\\n        _registeredPowerTokens[powerToken] = true;\\n\\n        emit ServiceRegistered(address(powerToken));\\n    }\\n\\n    function borrow(\\n        PowerToken powerToken,\\n        IERC20 paymentToken,\\n        uint112 amount,\\n        uint32 duration,\\n        uint256 maxPayment\\n    ) external notShutdown {\\n        require(_registeredPowerTokens[powerToken], Errors.UNREGISTERED_POWER_TOKEN);\\n        require(isSupportedPaymentToken(paymentToken), Errors.E_UNSUPPORTED_INTEREST_PAYMENT_TOKEN);\\n        require(powerToken.isAllowedLoanDuration(duration), Errors.E_LOAN_DURATION_OUT_OF_RANGE);\\n        require(amount > 0, Errors.E_INVALID_LOAN_AMOUNT);\\n        require(amount <= getAvailableReserve(), Errors.E_INSUFFICIENT_LIQUIDITY);\\n\\n        uint112 gcFee;\\n        {\\n            // scope to avoid stack too deep errors\\n            (uint112 interest, uint112 serviceFee, uint112 gcFeeAmount) =\\n                powerToken.estimateLoanDetailed(paymentToken, amount, duration);\\n            gcFee = gcFeeAmount;\\n\\n            uint256 loanCost = interest + serviceFee;\\n            require(loanCost + gcFee <= maxPayment, Errors.E_LOAN_COST_SLIPPAGE);\\n\\n            paymentToken.safeTransferFrom(msg.sender, address(this), loanCost);\\n\\n            uint256 convertedLiquidityTokens = loanCost;\\n\\n            if (address(paymentToken) != address(powerToken.getBaseToken())) {\\n                paymentToken.approve(address(_converter), loanCost);\\n                convertedLiquidityTokens = _converter.convert(paymentToken, loanCost, _liquidityToken);\\n            }\\n\\n            uint256 serviceLiquidity = (serviceFee * convertedLiquidityTokens) / loanCost;\\n            _liquidityToken.safeTransfer(_enterpriseVault, serviceLiquidity);\\n\\n            _usedReserve += amount;\\n\\n            uint112 poolInterest = uint112(convertedLiquidityTokens - serviceLiquidity);\\n            _increaseStreamingReserveTarget(poolInterest);\\n        }\\n        paymentToken.safeTransferFrom(msg.sender, address(_borrowToken), gcFee);\\n        uint32 borrowingTime = uint32(block.timestamp);\\n        uint32 maturityTime = borrowingTime + duration;\\n        uint256 borrowTokenId = _borrowToken.getNextTokenId();\\n        _loanInfo[borrowTokenId] = LoanInfo(\\n            amount,\\n            powerToken.getIndex(),\\n            borrowingTime,\\n            maturityTime,\\n            maturityTime + _borrowerLoanReturnGracePeriod,\\n            maturityTime + _enterpriseLoanCollectGracePeriod,\\n            gcFee,\\n            uint16(paymentTokenIndex(paymentToken))\\n        );\\n\\n        assert(_borrowToken.mint(msg.sender) == borrowTokenId); // also mints PowerTokens\\n\\n        powerToken.notifyNewLoan(borrowTokenId);\\n\\n        emit Borrowed(address(powerToken), borrowTokenId);\\n        emit UsedReserveChanged(_usedReserve);\\n    }\\n\\n    function reborrow(\\n        uint256 borrowTokenId,\\n        IERC20 paymentToken,\\n        uint32 duration,\\n        uint256 maxPayment\\n    ) external notShutdown {\\n        require(isSupportedPaymentToken(paymentToken), Errors.E_UNSUPPORTED_INTEREST_PAYMENT_TOKEN);\\n        LoanInfo storage loan = _loanInfo[borrowTokenId];\\n        require(loan.amount > 0, Errors.E_INVALID_LOAN_TOKEN_ID);\\n        PowerToken powerToken = _powerTokens[loan.powerTokenIndex];\\n        require(powerToken.isAllowedLoanDuration(duration), Errors.E_LOAN_DURATION_OUT_OF_RANGE);\\n        require(loan.maturityTime + duration >= block.timestamp, Errors.E_INVALID_LOAN_DURATION);\\n\\n        // emulating here loan return\\n        _usedReserve -= loan.amount;\\n\\n        (uint112 interest, uint112 serviceFee, ) = powerToken.estimateLoanDetailed(paymentToken, loan.amount, duration);\\n\\n        // emulating here borrow\\n        unchecked {_usedReserve += loan.amount;} // safe, because previously we successfully decreased it\\n        uint256 loanCost = interest + serviceFee;\\n\\n        require(loanCost <= maxPayment, Errors.E_LOAN_COST_SLIPPAGE);\\n\\n        paymentToken.safeTransferFrom(msg.sender, address(this), loanCost);\\n        uint256 convertedLiquidityTokens = loanCost;\\n        if (address(paymentToken) != address(powerToken.getBaseToken())) {\\n            paymentToken.approve(address(_converter), loanCost);\\n            convertedLiquidityTokens = _converter.convert(paymentToken, loanCost, _liquidityToken);\\n        }\\n\\n        uint256 serviceLiquidity = (serviceFee * convertedLiquidityTokens) / loanCost;\\n        _liquidityToken.safeTransfer(_enterpriseVault, serviceLiquidity);\\n\\n        uint112 poolInterest = uint112(convertedLiquidityTokens - serviceLiquidity);\\n        _increaseStreamingReserveTarget(poolInterest);\\n\\n        loan.maturityTime = loan.maturityTime + duration;\\n        loan.borrowerReturnGraceTime = loan.maturityTime + _borrowerLoanReturnGracePeriod;\\n        loan.enterpriseCollectGraceTime = loan.maturityTime + _enterpriseLoanCollectGracePeriod;\\n\\n        powerToken.notifyNewLoan(borrowTokenId);\\n\\n        emit Borrowed(address(powerToken), borrowTokenId);\\n    }\\n\\n    function returnLoan(uint256 borrowTokenId) external {\\n        LoanInfo storage loan = _loanInfo[borrowTokenId];\\n        require(loan.amount > 0, Errors.E_INVALID_LOAN_TOKEN_ID);\\n        address borrower = _borrowToken.ownerOf(borrowTokenId);\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        require(\\n            loan.borrowerReturnGraceTime < timestamp || msg.sender == borrower,\\n            Errors.E_INVALID_CALLER_WITHIN_BORROWER_GRACE_PERIOD\\n        );\\n        require(\\n            loan.enterpriseCollectGraceTime < timestamp || msg.sender == borrower || msg.sender == _enterpriseCollector,\\n            Errors.E_INVALID_CALLER_WITHIN_ENTERPRISE_GRACE_PERIOD\\n        );\\n        if (!_enterpriseShutdown) {\\n            _usedReserve -= loan.amount;\\n            emit UsedReserveChanged(_usedReserve);\\n        }\\n\\n        _borrowToken.burn(borrowTokenId, msg.sender); // burns PowerTokens, returns gc fee\\n\\n        delete _loanInfo[borrowTokenId];\\n        emit LoanReturned(borrowTokenId);\\n    }\\n\\n    /**\\n     * One must approve sufficient amount of liquidity tokens to\\n     * Enterprise address before calling this function\\n     */\\n    function addLiquidity(uint256 liquidityAmount) external notShutdown {\\n        _liquidityToken.safeTransferFrom(msg.sender, address(this), liquidityAmount);\\n\\n        uint256 newShares = (_totalShares == 0 ? liquidityAmount : _liquidityToShares(liquidityAmount));\\n\\n        _increaseReserve(liquidityAmount);\\n\\n        uint256 interestTokenId = _interestToken.mint(msg.sender);\\n\\n        _liquidityInfo[interestTokenId] = LiquidityInfo(liquidityAmount, newShares, block.number);\\n\\n        _increaseShares(newShares);\\n        emit LiquidityChanged(interestTokenId, LiquidityChangeType.Add, liquidityAmount);\\n    }\\n\\n    function withdrawInterest(uint256 interestTokenId) external onlyInterestTokenOwner(interestTokenId) {\\n        LiquidityInfo storage liquidityInfo = _liquidityInfo[interestTokenId];\\n        uint256 shares = liquidityInfo.shares;\\n\\n        uint256 interest = getAccruedInterest(interestTokenId);\\n        require(interest <= getAvailableReserve(), Errors.E_INSUFFICIENT_LIQUIDITY);\\n\\n        _liquidityToken.safeTransfer(msg.sender, interest);\\n\\n        uint256 newShares = _liquidityToShares(liquidityInfo.amount);\\n        liquidityInfo.shares = newShares;\\n\\n        _decreaseShares(shares - newShares);\\n        _decreaseReserve(interest);\\n        emit LiquidityChanged(interestTokenId, LiquidityChangeType.WithdrawInterest, interest);\\n    }\\n\\n    function removeLiquidity(uint256 interestTokenId) external onlyInterestTokenOwner(interestTokenId) {\\n        LiquidityInfo storage liquidityInfo = _liquidityInfo[interestTokenId];\\n        require(liquidityInfo.block < block.number, Errors.E_FLASH_LIQUIDITY_REMOVAL);\\n        uint256 shares = liquidityInfo.shares;\\n\\n        uint256 liquidityWithInterest = _sharesToLiquidity(shares);\\n        require(liquidityWithInterest <= getAvailableReserve(), Errors.E_INSUFFICIENT_LIQUIDITY);\\n\\n        _interestToken.burn(interestTokenId);\\n        _liquidityToken.safeTransfer(msg.sender, liquidityWithInterest);\\n\\n        _decreaseShares(shares);\\n        _decreaseReserve(liquidityWithInterest);\\n        delete _liquidityInfo[interestTokenId];\\n        emit LiquidityChanged(interestTokenId, LiquidityChangeType.Remove, liquidityWithInterest);\\n    }\\n\\n    function decreaseLiquidity(uint256 interestTokenId, uint256 amount) external onlyInterestTokenOwner(interestTokenId) {\\n        LiquidityInfo storage liquidityInfo = _liquidityInfo[interestTokenId];\\n        require(liquidityInfo.block < block.number, Errors.E_FLASH_LIQUIDITY_REMOVAL);\\n        require(liquidityInfo.amount >= amount, Errors.E_INSUFFICIENT_LIQUIDITY);\\n        require(amount <= getAvailableReserve(), Errors.E_INSUFFICIENT_LIQUIDITY);\\n        _liquidityToken.safeTransfer(msg.sender, amount);\\n\\n        uint256 shares = _liquidityToShares(amount);\\n        if (shares > liquidityInfo.shares) {\\n            shares = liquidityInfo.shares;\\n        }\\n        unchecked {\\n            liquidityInfo.shares -= shares;\\n            liquidityInfo.amount -= amount;\\n        }\\n        _decreaseShares(shares);\\n        _decreaseReserve(amount);\\n        emit LiquidityChanged(interestTokenId, LiquidityChangeType.Decrease, amount);\\n    }\\n\\n    function increaseLiquidity(uint256 interestTokenId, uint256 amount) external notShutdown onlyInterestTokenOwner(interestTokenId) {\\n        _liquidityToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 newShares = (_totalShares == 0 ? amount : _liquidityToShares(amount));\\n\\n        _increaseReserve(amount);\\n        LiquidityInfo storage liquidityInfo = _liquidityInfo[interestTokenId];\\n        liquidityInfo.amount += amount;\\n        liquidityInfo.shares += newShares;\\n        liquidityInfo.block = block.number;\\n        _increaseShares(newShares);\\n        emit LiquidityChanged(interestTokenId, LiquidityChangeType.Increase, amount);\\n    }\\n\\n    function estimateLoan(\\n        PowerToken powerToken,\\n        IERC20 paymentToken,\\n        uint112 amount,\\n        uint32 duration\\n    ) external view notShutdown returns (uint256) {\\n        require(_registeredPowerTokens[powerToken], Errors.UNREGISTERED_POWER_TOKEN);\\n\\n        return powerToken.estimateLoan(paymentToken, amount, duration);\\n    }\\n\\n    function _increaseReserve(uint256 delta) internal {\\n        _fixedReserve += delta;\\n        emit FixedReserveChanged(_fixedReserve);\\n    }\\n\\n    function _decreaseReserve(uint256 delta) internal {\\n        if (_fixedReserve >= delta) {\\n            unchecked {_fixedReserve -= delta;}\\n        } else {\\n            uint256 streamingReserve = _flushStreamingReserve();\\n\\n            _fixedReserve = _fixedReserve + streamingReserve - delta;\\n        }\\n        emit FixedReserveChanged(_fixedReserve);\\n    }\\n\\n    function _increaseShares(uint256 delta) internal {\\n        _totalShares += delta;\\n        emit TotalSharesChanged(_totalShares);\\n    }\\n\\n    function _decreaseShares(uint256 delta) internal {\\n        _totalShares -= delta;\\n        emit TotalSharesChanged(_totalShares);\\n    }\\n\\n    function _liquidityToShares(uint256 amount) internal view returns (uint256) {\\n        return (_totalShares * amount) / getReserve();\\n    }\\n\\n    function _sharesToLiquidity(uint256 shares) internal view returns (uint256) {\\n        return (getReserve() * shares) / _totalShares;\\n    }\\n\\n    function loanTransfer(\\n        address from,\\n        address to,\\n        uint256 borrowTokenId\\n    ) external onlyBorrowToken {\\n        uint112 amount = _loanInfo[borrowTokenId].amount;\\n        require(amount > 0, Errors.E_INVALID_LOAN_TOKEN_ID);\\n\\n        bool isExpiredBorrow = (block.timestamp > _loanInfo[borrowTokenId].maturityTime);\\n        bool isMinting = (from == address(0));\\n        bool isBurning = (to == address(0));\\n        PowerToken powerToken = _powerTokens[_loanInfo[borrowTokenId].powerTokenIndex];\\n\\n        if (isBurning) {\\n            powerToken.burnFrom(from, amount);\\n        } else if (isMinting) {\\n            powerToken.mint(to, amount);\\n        } else if (!isExpiredBorrow) {\\n            powerToken.forceTransfer(from, to, amount);\\n        } else {\\n            revert(Errors.E_LOAN_TRANSFER_NOT_ALLOWED);\\n        }\\n    }\\n\\n    function getAccruedInterest(uint256 interestTokenId) public view returns (uint256) {\\n        LiquidityInfo storage liquidityInfo = _liquidityInfo[interestTokenId];\\n\\n        uint256 liquidity = _sharesToLiquidity(liquidityInfo.shares);\\n        // Due to rounding errors calculated liquidity could be insignificantly\\n        // less than provided liquidity\\n        return liquidity <= liquidityInfo.amount ? 0 : liquidity - liquidityInfo.amount;\\n    }\\n\\n    /**\\n     * @dev Shuts down Enterprise.\\n     *  * Unlocks all reverves, LPs can withdraw their tokens\\n     *  * Disables adding liquidity\\n     *  * Disables borrowing\\n     *  * Disables wrapping\\n     *\\n     * !!! Cannot be undone !!!\\n     */\\n    function shutdownEnterpriseForever() external notShutdown onlyOwner {\\n        _enterpriseShutdown = true;\\n        _usedReserve = 0;\\n        _streamingReserve = _streamingReserveTarget;\\n\\n        emit EnterpriseShutdown();\\n    }\\n}\\n\",\"keccak256\":\"0x2f8871ef37f49b4c8deabf35929e44a8dce08a567a66afb8e55266d53a473193\",\"license\":\"UNLICENSED\"},\"contracts/EnterpriseFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"./Enterprise.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./InterestToken.sol\\\";\\nimport \\\"./BorrowToken.sol\\\";\\nimport \\\"./PowerToken.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\ncontract EnterpriseFactory {\\n    event EnterpriseDeployed(\\n        address indexed creator,\\n        address indexed liquidityToken,\\n        string name,\\n        string baseUri,\\n        address deployed\\n    );\\n\\n    address private immutable _enterpriseImpl;\\n    address private immutable _powerTokenImpl;\\n    address private immutable _interestTokenImpl;\\n    address private immutable _borrowTokenImpl;\\n\\n    constructor(\\n        address enterpriseImpl,\\n        address powerTokenImpl,\\n        address interestTokenImpl,\\n        address borrowTokenImpl\\n    ) {\\n        require(enterpriseImpl != address(0), Errors.EF_INVALID_ENTERPRISE_IMPLEMENTATION_ADDRESS);\\n        require(powerTokenImpl != address(0), Errors.EF_INVALID_POWER_TOKEN_IMPLEMENTATION_ADDRESS);\\n        require(interestTokenImpl != address(0), Errors.EF_INVALID_INTEREST_TOKEN_IMPLEMENTATION_ADDRESS);\\n        require(borrowTokenImpl != address(0), Errors.EF_INVALID_BORROW_TOKEN_IMPLEMENTATION_ADDRESS);\\n        _enterpriseImpl = enterpriseImpl;\\n        _powerTokenImpl = powerTokenImpl;\\n        _interestTokenImpl = interestTokenImpl;\\n        _borrowTokenImpl = borrowTokenImpl;\\n    }\\n\\n    function deploy(\\n        string calldata name,\\n        IERC20Metadata liquidityToken,\\n        string calldata baseUri,\\n        uint16 gcFeePercent,\\n        IConverter converter\\n    ) external returns (Enterprise) {\\n        ProxyAdmin proxyAdmin = new ProxyAdmin();\\n\\n        Enterprise enterprise = Enterprise(deployProxy(_enterpriseImpl, proxyAdmin));\\n        proxyAdmin.transferOwnership(address(enterprise));\\n        {\\n            enterprise.initialize(name, baseUri, gcFeePercent, converter, proxyAdmin, msg.sender);\\n        }\\n        {\\n            InterestToken interestToken = _deployInterestToken(liquidityToken.symbol(), enterprise, proxyAdmin);\\n            BorrowToken borrowToken = _deployBorrowToken(liquidityToken.symbol(), enterprise, proxyAdmin);\\n            enterprise.initializeTokens(liquidityToken, interestToken, borrowToken);\\n        }\\n\\n        emit EnterpriseDeployed(msg.sender, address(liquidityToken), name, baseUri, address(enterprise));\\n\\n        return enterprise;\\n    }\\n\\n    function deployProxy(address implementation, ProxyAdmin admin) internal returns (address) {\\n        return address(new TransparentUpgradeableProxy(implementation, address(admin), \\\"\\\"));\\n    }\\n\\n    function deployService(ProxyAdmin admin) external returns (PowerToken) {\\n        return PowerToken(deployProxy(_powerTokenImpl, admin));\\n    }\\n\\n    function _deployInterestToken(\\n        string memory symbol,\\n        Enterprise enterprise,\\n        ProxyAdmin proxyAdmin\\n    ) internal returns (InterestToken) {\\n        string memory interestTokenName = string(abi.encodePacked(\\\"Interest Bearing \\\", symbol));\\n        string memory interestTokenSymbol = string(abi.encodePacked(\\\"i\\\", symbol));\\n\\n        InterestToken interestToken = InterestToken(deployProxy(_interestTokenImpl, proxyAdmin));\\n        interestToken.initialize(interestTokenName, interestTokenSymbol, enterprise);\\n        return interestToken;\\n    }\\n\\n    function _deployBorrowToken(\\n        string memory symbol,\\n        Enterprise enterprise,\\n        ProxyAdmin proxyAdmin\\n    ) internal returns (BorrowToken) {\\n        string memory borrowTokenName = string(abi.encodePacked(\\\"Borrow \\\", symbol));\\n        string memory borrowTokenSymbol = string(abi.encodePacked(\\\"b\\\", symbol));\\n\\n        BorrowToken borrowToken = BorrowToken(deployProxy(_borrowTokenImpl, proxyAdmin));\\n        borrowToken.initialize(borrowTokenName, borrowTokenSymbol, enterprise);\\n        return borrowToken;\\n    }\\n\\n    function getEnterpriseImpl() external view returns (address) {\\n        return _enterpriseImpl;\\n    }\\n\\n    function getPowerTokenImpl() external view returns (address) {\\n        return _powerTokenImpl;\\n    }\\n\\n    function getInterestTokenImpl() external view returns (address) {\\n        return _interestTokenImpl;\\n    }\\n\\n    function getBorrowTokenImpl() external view returns (address) {\\n        return _borrowTokenImpl;\\n    }\\n}\\n\",\"keccak256\":\"0xd9fae0952c4054858f30e83662576e4742d01fa94c44a038b9f3d6048feb26b8\",\"license\":\"UNLICENSED\"},\"contracts/EnterpriseOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"./Enterprise.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\n/**\\n * @dev Ownable contract with `initialize` function instead of constructor. Primary usage is for proxies like ERC-1167 with no constructor.\\n */\\nabstract contract EnterpriseOwnable {\\n    Enterprise private _enterprise;\\n\\n    /**\\n     * @dev Initializes the enterprise of the contract. The inheritor of this contract *MUST* ensure this method is not called twice.\\n     */\\n    function initialize(Enterprise enterprise) public {\\n        require(address(_enterprise) == address(0), Errors.ALREADY_INITIALIZED);\\n        require(address(enterprise) != address(0), Errors.EO_INVALID_ENTERPRISE_ADDRESS);\\n        _enterprise = enterprise;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current enterprise.\\n     */\\n    function getEnterprise() public view returns (Enterprise) {\\n        return _enterprise;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the enterprise.\\n     */\\n    modifier onlyEnterprise() {\\n        require(address(_enterprise) == msg.sender, Errors.CALLER_NOT_ENTERPRISE);\\n        _;\\n    }\\n\\n    modifier onlyEnterpriseOwner() {\\n        require(_enterprise.owner() == msg.sender, Errors.CALLER_NOT_OWNER);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x27ba62bdf197c46b0923430795ef4e262051417b656b744f69fdfafbe07464bb\",\"license\":\"UNLICENSED\"},\"contracts/EnterpriseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./interfaces/IPowerToken.sol\\\";\\nimport \\\"./interfaces/IInterestToken.sol\\\";\\nimport \\\"./interfaces/IBorrowToken.sol\\\";\\nimport \\\"./interfaces/IConverter.sol\\\";\\nimport \\\"./InitializableOwnable.sol\\\";\\nimport \\\"./EnterpriseFactory.sol\\\";\\nimport \\\"./math/ExpMath.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\n/**\\n * @dev Contract which stores Enterprise state\\n * To prevent Enterprise from front-running it's users, it is supposed to be owned by some\\n * Governance system. For example: OpenZeppelin `TimelockController` contract can\\n * be used as an `owner` of this contract\\n */\\nabstract contract EnterpriseStorage is InitializableOwnable {\\n    struct LoanInfo {\\n        // slot 1, 0 bytes left\\n        uint112 amount; // 14 bytes\\n        uint16 powerTokenIndex; // 2 bytes, index in powerToken array\\n        uint32 borrowingTime; // 4 bytes\\n        uint32 maturityTime; // 4 bytes\\n        uint32 borrowerReturnGraceTime; // 4 bytes\\n        uint32 enterpriseCollectGraceTime; // 4 bytes\\n        // slot 2, 16 bytes left\\n        uint112 gcFee; // 14 bytes, loan return reward\\n        uint16 gcFeeTokenIndex; // 2 bytes, index in `_paymentTokens` array\\n    }\\n\\n    struct LiquidityInfo {\\n        uint256 amount;\\n        uint256 shares;\\n        uint256 block;\\n    }\\n\\n    // This is the keccak-256 hash of \\\"iq.protocol.proxy.admin\\\" subtracted by 1\\n    bytes32 private constant _PROXY_ADMIN_SLOT = 0xd1248cccb5fef9131c731321e43e9a924840ffee7dc68c7d1d3e5cb7dedcae03;\\n\\n    /**\\n     * @dev ERC20 token backed by enterprise services\\n     */\\n    IERC20Metadata internal _liquidityToken;\\n\\n    /**\\n     * @dev ERC721 token for liquidity providers\\n     */\\n    IInterestToken internal _interestToken;\\n\\n    /**\\n     * @dev ERC721 token for borrowers\\n     */\\n    IBorrowToken internal _borrowToken;\\n    EnterpriseFactory internal _factory;\\n    uint32 internal _interestGapHalvingPeriod;\\n    bool internal _enterpriseShutdown;\\n\\n    IConverter internal _converter;\\n\\n    /**\\n     * @dev address which have rights to collect expired PowerTokens\\n     */\\n    address internal _enterpriseCollector;\\n\\n    /**\\n     * @dev address where collected service fee goes\\n     */\\n    address internal _enterpriseVault;\\n\\n    uint32 internal _borrowerLoanReturnGracePeriod;\\n    uint32 internal _enterpriseLoanCollectGracePeriod;\\n    uint16 internal _gcFeePercent; // 100 is 1%, 10_000 is 100%\\n\\n    mapping(address => int16) internal _paymentTokensIndex;\\n    address[] internal _paymentTokens;\\n\\n    /**\\n     * @dev Amount of fixed `_liquidityToken`\\n     */\\n    uint256 internal _fixedReserve;\\n\\n    /**\\n     * @dev Borrowed reserves of `_liquidityToken`\\n     */\\n    uint256 internal _usedReserve;\\n\\n    /**\\n     * @dev Reserves which are streamed from borrower to the pool\\n     */\\n    uint112 internal _streamingReserve;\\n    uint112 internal _streamingReserveTarget;\\n    uint32 internal _streamingReserveUpdated;\\n\\n    /**\\n     * Total shares given to liquidity providers\\n     */\\n    uint256 internal _totalShares;\\n\\n    uint256 internal _bondingSlope;\\n    uint256 internal _bondingPole;\\n\\n    string internal _name;\\n    string internal _baseUri;\\n    mapping(uint256 => LoanInfo) internal _loanInfo;\\n    mapping(uint256 => LiquidityInfo) internal _liquidityInfo;\\n    mapping(PowerToken => bool) internal _registeredPowerTokens;\\n    PowerToken[] internal _powerTokens;\\n\\n    event EnterpriseLoanCollectGracePeriodChanged(uint32 period);\\n    event BorrowerLoanReturnGracePeriodChanged(uint32 period);\\n    event BondingChanged(uint256 pole, uint256 slope);\\n    event ConverterChanged(address converter);\\n    event InterestGapHalvingPeriodChanged(uint32 period);\\n    event GcFeePercentChanged(uint16 percent);\\n    event EnterpriseShutdown();\\n    event TotalSharesChanged(uint256 totalShares);\\n    event UsedReserveChanged(uint256 fixedReserve);\\n    event FixedReserveChanged(uint256 fixedReserve);\\n    event StreamingReserveChanged(uint112 streamingReserve, uint112 streamingReserveTarget);\\n    event PaymentTokenChange(address paymentToken, bool enabled);\\n    event EnterpriseVaultChanged(address vault);\\n    event EnterpriseCollectorChanged(address collector);\\n    event BaseUriChanged(string baseUri);\\n\\n    modifier notShutdown() {\\n        require(!_enterpriseShutdown, Errors.E_ENTERPRISE_SHUTDOWN);\\n        _;\\n    }\\n\\n    modifier onlyBorrowToken() {\\n        require(msg.sender == address(_borrowToken), Errors.E_CALLER_NOT_BORROW_TOKEN);\\n        _;\\n    }\\n\\n    modifier onlyInterestTokenOwner(uint256 interestTokenId) {\\n        require(_interestToken.ownerOf(interestTokenId) == msg.sender, Errors.CALLER_NOT_OWNER);\\n        _;\\n    }\\n\\n    function initialize(\\n        string memory enterpriseName,\\n        string calldata baseUri,\\n        uint16 gcFeePercent,\\n        IConverter converter,\\n        ProxyAdmin proxyAdmin,\\n        address owner\\n    ) external {\\n        require(bytes(_name).length == 0, Errors.ALREADY_INITIALIZED);\\n        InitializableOwnable.initialize(owner);\\n        StorageSlot.getAddressSlot(_PROXY_ADMIN_SLOT).value = address(proxyAdmin);\\n        _factory = EnterpriseFactory(msg.sender);\\n        _name = enterpriseName;\\n        _baseUri = baseUri;\\n        _gcFeePercent = gcFeePercent;\\n        _converter = converter;\\n        _enterpriseVault = owner;\\n        _enterpriseCollector = owner;\\n        _interestGapHalvingPeriod = 7 days;\\n        _borrowerLoanReturnGracePeriod = 12 hours;\\n        _enterpriseLoanCollectGracePeriod = 1 days;\\n        _bondingPole = uint256(5 << 64) / 100; // 5%\\n        _bondingSlope = uint256(3 << 64) / 10; // 0.3\\n\\n        emit BaseUriChanged(baseUri);\\n        emit GcFeePercentChanged(_gcFeePercent);\\n        emit ConverterChanged(address(_converter));\\n        emit EnterpriseVaultChanged(_enterpriseVault);\\n        emit EnterpriseCollectorChanged(_enterpriseCollector);\\n        emit InterestGapHalvingPeriodChanged(_interestGapHalvingPeriod);\\n        emit BorrowerLoanReturnGracePeriodChanged(_borrowerLoanReturnGracePeriod);\\n        emit EnterpriseLoanCollectGracePeriodChanged(_enterpriseLoanCollectGracePeriod);\\n        emit BondingChanged(_bondingPole, _bondingSlope);\\n    }\\n\\n    function initializeTokens(\\n        IERC20Metadata liquidityToken,\\n        IInterestToken interestToken,\\n        IBorrowToken borrowToken\\n    ) external {\\n        require(address(_liquidityToken) == address(0), Errors.ALREADY_INITIALIZED);\\n        _liquidityToken = liquidityToken;\\n        _interestToken = interestToken;\\n        _borrowToken = borrowToken;\\n        _enablePaymentToken(address(liquidityToken));\\n    }\\n\\n    function isRegisteredPowerToken(PowerToken powerToken) external view returns (bool) {\\n        return _registeredPowerTokens[powerToken];\\n    }\\n\\n    function getLiquidityToken() external view returns (IERC20Metadata) {\\n        return _liquidityToken;\\n    }\\n\\n    function getInterestToken() external view returns (IInterestToken) {\\n        return _interestToken;\\n    }\\n\\n    function getBorrowToken() external view returns (IBorrowToken) {\\n        return _borrowToken;\\n    }\\n\\n    function paymentTokenIndex(IERC20 token) public view returns (int16) {\\n        return _paymentTokensIndex[address(token)] - 1;\\n    }\\n\\n    function paymentToken(uint256 index) external view returns (address) {\\n        return _paymentTokens[index];\\n    }\\n\\n    function isSupportedPaymentToken(IERC20 token) public view returns (bool) {\\n        return _paymentTokensIndex[address(token)] > 0;\\n    }\\n\\n    function getProxyAdmin() public view returns (ProxyAdmin) {\\n        return ProxyAdmin(StorageSlot.getAddressSlot(_PROXY_ADMIN_SLOT).value);\\n    }\\n\\n    function getEnterpriseCollector() external view returns (address) {\\n        return _enterpriseCollector;\\n    }\\n\\n    function getEnterpriseVault() external view returns (address) {\\n        return _enterpriseVault;\\n    }\\n\\n    function getBorrowerLoanReturnGracePeriod() external view returns (uint32) {\\n        return _borrowerLoanReturnGracePeriod;\\n    }\\n\\n    function getEnterpriseLoanCollectGracePeriod() external view returns (uint32) {\\n        return _enterpriseLoanCollectGracePeriod;\\n    }\\n\\n    function getInterestGapHalvingPeriod() external view returns (uint32) {\\n        return _interestGapHalvingPeriod;\\n    }\\n\\n    function getConverter() external view returns (IConverter) {\\n        return _converter;\\n    }\\n\\n    function getBaseUri() external view returns (string memory) {\\n        return _baseUri;\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory baseUri,\\n            uint256 totalShares,\\n            uint32 interestGapHalvingPeriod,\\n            uint32 borrowerLoanReturnGracePeriod,\\n            uint32 enterpriseLoanCollectGracePeriod,\\n            uint16 gcFeePercent,\\n            uint256 fixedReserve,\\n            uint256 usedReserve,\\n            uint112 streamingReserve,\\n            uint112 streamingReserveTarget,\\n            uint32 streamingReserveUpdated\\n        )\\n    {\\n        return (\\n            _name,\\n            _baseUri,\\n            _totalShares,\\n            _interestGapHalvingPeriod,\\n            _borrowerLoanReturnGracePeriod,\\n            _enterpriseLoanCollectGracePeriod,\\n            _gcFeePercent,\\n            _fixedReserve,\\n            _usedReserve,\\n            _streamingReserve,\\n            _streamingReserveTarget,\\n            _streamingReserveUpdated\\n        );\\n    }\\n\\n    function getPowerTokens() external view returns (PowerToken[] memory) {\\n        return _powerTokens;\\n    }\\n\\n    function getLoanInfo(uint256 borrowTokenId) external view returns (LoanInfo memory) {\\n        _borrowToken.ownerOf(borrowTokenId); // will throw on non existent tokenId\\n        return _loanInfo[borrowTokenId];\\n    }\\n\\n    function getLiquidityInfo(uint256 interestTokenId) external view returns (LiquidityInfo memory) {\\n        _interestToken.ownerOf(interestTokenId); // will throw on non existent tokenId\\n        return _liquidityInfo[interestTokenId];\\n    }\\n\\n    function getReserve() public view returns (uint256) {\\n        return _fixedReserve + _getStreamingReserve();\\n    }\\n\\n    function getUsedReserve() external view returns (uint256) {\\n        return _usedReserve;\\n    }\\n\\n    function getAvailableReserve() public view returns (uint256) {\\n        return getReserve() - _usedReserve;\\n    }\\n\\n    function getBondingCurve() external view returns (uint256 pole, uint256 slope) {\\n        return (_bondingPole, _bondingSlope);\\n    }\\n\\n    function setEnterpriseCollector(address newCollector) external onlyOwner {\\n        require(newCollector != address(0), Errors.ES_INVALID_COLLECTOR_ADDRESS);\\n        _enterpriseCollector = newCollector;\\n        emit EnterpriseCollectorChanged(newCollector);\\n    }\\n\\n    function setEnterpriseVault(address newVault) external onlyOwner {\\n        require(newVault != address(0), Errors.ES_INVALID_VAULT_ADDRESS);\\n        _enterpriseVault = newVault;\\n        emit EnterpriseVaultChanged(newVault);\\n    }\\n\\n    function setConverter(IConverter newConverter) external onlyOwner {\\n        require(address(newConverter) != address(0), Errors.ES_INVALID_CONVERTER_ADDRESS);\\n        _converter = newConverter;\\n        emit ConverterChanged(address(newConverter));\\n    }\\n\\n    function setBondingCurve(uint256 pole, uint256 slope) external onlyOwner {\\n        require(pole <= uint256(3 << 64) / 10, Errors.ES_INVALID_BONDING_POLE); // max is 30%\\n        require(slope <= (1 << 64), Errors.ES_INVALID_BONDING_SLOPE);\\n        _bondingPole = pole;\\n        _bondingSlope = slope;\\n        emit BondingChanged(_bondingPole, _bondingSlope);\\n    }\\n\\n    function setBorrowerLoanReturnGracePeriod(uint32 newPeriod) external onlyOwner {\\n        require(newPeriod <= _enterpriseLoanCollectGracePeriod, Errors.ES_INVALID_BORROWER_LOAN_RETURN_GRACE_PERIOD);\\n\\n        _borrowerLoanReturnGracePeriod = newPeriod;\\n        emit BorrowerLoanReturnGracePeriodChanged(newPeriod);\\n    }\\n\\n    function setEnterpriseLoanCollectGracePeriod(uint32 newPeriod) external onlyOwner {\\n        require(_borrowerLoanReturnGracePeriod <= newPeriod, Errors.ES_INVALID_ENTERPRISE_LOAN_COLLECT_GRACE_PERIOD);\\n\\n        _enterpriseLoanCollectGracePeriod = newPeriod;\\n        emit EnterpriseLoanCollectGracePeriodChanged(newPeriod);\\n    }\\n\\n    function setBaseUri(string calldata baseUri) external onlyOwner {\\n        _baseUri = baseUri;\\n        emit BaseUriChanged(baseUri);\\n    }\\n\\n    function setInterestGapHalvingPeriod(uint32 interestGapHalvingPeriod) external onlyOwner {\\n        require(interestGapHalvingPeriod > 0, Errors.ES_INTEREST_GAP_HALVING_PERIOD_NOT_GT_0);\\n        _interestGapHalvingPeriod = interestGapHalvingPeriod;\\n        emit InterestGapHalvingPeriodChanged(interestGapHalvingPeriod);\\n    }\\n\\n    function upgradePowerToken(PowerToken powerToken, address implementation) external onlyOwner {\\n        require(_registeredPowerTokens[powerToken], Errors.UNREGISTERED_POWER_TOKEN);\\n        getProxyAdmin().upgrade(TransparentUpgradeableProxy(payable(address(powerToken))), implementation);\\n    }\\n\\n    function upgradeBorrowToken(address implementation) external onlyOwner {\\n        getProxyAdmin().upgrade(TransparentUpgradeableProxy(payable(address(_borrowToken))), implementation);\\n    }\\n\\n    function upgradeInterestToken(address implementation) external onlyOwner {\\n        getProxyAdmin().upgrade(TransparentUpgradeableProxy(payable(address(_interestToken))), implementation);\\n    }\\n\\n    function upgradeEnterprise(address implementation) external onlyOwner {\\n        getProxyAdmin().upgrade(TransparentUpgradeableProxy(payable(address(this))), implementation);\\n    }\\n\\n    function setGcFeePercent(uint16 newGcFeePercent) external onlyOwner {\\n        _gcFeePercent = newGcFeePercent;\\n        emit GcFeePercentChanged(newGcFeePercent);\\n    }\\n\\n    function getGCFeePercent() external view returns (uint16) {\\n        return _gcFeePercent;\\n    }\\n\\n    function enablePaymentToken(address token) external onlyOwner {\\n        require(token != address(0), Errors.ES_INVALID_PAYMENT_TOKEN_ADDRESS);\\n        _enablePaymentToken(token);\\n    }\\n\\n    function disablePaymentToken(address token) external onlyOwner {\\n        require(_paymentTokensIndex[token] != 0, Errors.ES_UNREGISTERED_PAYMENT_TOKEN);\\n\\n        if (_paymentTokensIndex[token] > 0) {\\n            _paymentTokensIndex[token] = -_paymentTokensIndex[token];\\n            emit PaymentTokenChange(token, false);\\n        }\\n    }\\n\\n    function _enablePaymentToken(address token) internal {\\n        if (_paymentTokensIndex[token] == 0) {\\n            _paymentTokens.push(token);\\n            _paymentTokensIndex[token] = int16(uint16(_paymentTokens.length));\\n            emit PaymentTokenChange(token, true);\\n        } else if (_paymentTokensIndex[token] < 0) {\\n            _paymentTokensIndex[token] = -_paymentTokensIndex[token];\\n            emit PaymentTokenChange(token, true);\\n        }\\n    }\\n\\n    function _getStreamingReserve() internal view returns (uint112) {\\n        return\\n            _streamingReserveTarget -\\n            ExpMath.halfLife(\\n                _streamingReserveUpdated,\\n                _streamingReserveTarget - _streamingReserve,\\n                _interestGapHalvingPeriod,\\n                uint32(block.timestamp)\\n            );\\n    }\\n\\n    function _increaseStreamingReserveTarget(uint112 delta) internal {\\n        _streamingReserve = _getStreamingReserve();\\n        _streamingReserveTarget += delta;\\n        _streamingReserveUpdated = uint32(block.timestamp);\\n        emit StreamingReserveChanged(_streamingReserve, _streamingReserveTarget);\\n    }\\n\\n    function _flushStreamingReserve() internal returns (uint112 streamingReserve) {\\n        streamingReserve = _getStreamingReserve();\\n\\n        _streamingReserve = 0;\\n        _streamingReserveTarget -= streamingReserve;\\n        _streamingReserveUpdated = uint32(block.timestamp);\\n        emit StreamingReserveChanged(_streamingReserve, _streamingReserveTarget);\\n    }\\n}\\n\",\"keccak256\":\"0x0fbd100902d672295d6ba40298d3ba10aaf5c09c380857972a5514f0c06b0e53\",\"license\":\"UNLICENSED\"},\"contracts/InitializableOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\n/**\\n * @dev Ownable contract with `initialize` function instead of constructor. Primary usage is for proxies like ERC-1167 with no constructor.\\n */\\nabstract contract InitializableOwnable {\\n    // This is the keccak-256 hash of \\\"iq.protocol.owner\\\" subtracted by 1\\n    bytes32 private constant _OWNER_SLOT = 0x4f471908b72bb76dae5bd24599026e7bf3ddb256497722888ffa422f83729ede;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the owner of the contract. The inheritor of this contract *MUST* ensure this method is not called twice.\\n     */\\n    function initialize(address initialOwner) public {\\n        require(owner() == address(0), Errors.ALREADY_INITIALIZED);\\n        require(initialOwner != address(0), Errors.IO_INVALID_OWNER_ADDRESS);\\n        StorageSlot.getAddressSlot(_OWNER_SLOT).value = initialOwner;\\n        emit OwnershipTransferred(address(0), initialOwner);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return StorageSlot.getAddressSlot(_OWNER_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, Errors.CALLER_NOT_OWNER);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external virtual onlyOwner {\\n        require(newOwner != address(0), Errors.IO_INVALID_OWNER_ADDRESS);\\n        emit OwnershipTransferred(owner(), newOwner);\\n        StorageSlot.getAddressSlot(_OWNER_SLOT).value = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4cec3da3a796953372ec79e655f02e73db2813023334c7721da4131dcff76a1a\",\"license\":\"UNLICENSED\"},\"contracts/InterestToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./interfaces/IInterestToken.sol\\\";\\nimport \\\"./Enterprise.sol\\\";\\nimport \\\"./EnterpriseOwnable.sol\\\";\\nimport \\\"./token/ERC721Enumerable.sol\\\";\\n\\ncontract InterestToken is IInterestToken, EnterpriseOwnable, ERC721Enumerable {\\n    uint256 private _tokenIdTracker;\\n\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        Enterprise enterprise\\n    ) external {\\n        EnterpriseOwnable.initialize(enterprise);\\n        ERC721.initialize(name_, symbol_);\\n    }\\n\\n    function getNextTokenId() public view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(\\\"i\\\", address(this), _tokenIdTracker)));\\n    }\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        string memory baseURI = getEnterprise().getBaseUri();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, \\\"interest/\\\")) : \\\"\\\";\\n    }\\n\\n    function mint(address to) external override onlyEnterprise returns (uint256) {\\n        uint256 tokenId = getNextTokenId();\\n        _safeMint(to, tokenId);\\n        _tokenIdTracker++;\\n        return tokenId;\\n    }\\n\\n    function burn(uint256 tokenId) external override onlyEnterprise {\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xb2f1d8707a6bb8fabd0fd273cca077f483d16802d7bd874763e142acb4a4a398\",\"license\":\"UNLICENSED\"},\"contracts/PowerToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./math/ExpMath.sol\\\";\\nimport \\\"./token/ERC20.sol\\\";\\nimport \\\"./interfaces/IPowerToken.sol\\\";\\nimport \\\"./Enterprise.sol\\\";\\nimport \\\"./EnterpriseStorage.sol\\\";\\nimport \\\"./PowerTokenStorage.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\ncontract PowerToken is IPowerToken, PowerTokenStorage, ERC20 {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    uint256 internal constant ONE = 1 << 64;\\n\\n    function mint(address to, uint256 value) external override onlyEnterprise {\\n        _mint(to, value, true);\\n    }\\n\\n    function burnFrom(address account, uint256 value) external override onlyEnterprise {\\n        _burn(account, value, true);\\n    }\\n\\n    function availableBalanceOf(address account) external view returns (uint256) {\\n        return balanceOf(account) - _states[account].lockedBalance;\\n    }\\n\\n    function energyAt(address who, uint32 timestamp) external view returns (uint112) {\\n        State memory state = _states[who];\\n        return _getEnergy(state, who, timestamp);\\n    }\\n\\n    function _getEnergy(\\n        State memory state,\\n        address who,\\n        uint32 timestamp\\n    ) internal view returns (uint112) {\\n        uint112 balance = uint112(balanceOf(who));\\n        if (balance > state.energy) {\\n            return balance - ExpMath.halfLife(state.timestamp, balance - state.energy, _gapHalvingPeriod, timestamp);\\n        } else {\\n            return balance + ExpMath.halfLife(state.timestamp, state.energy - balance, _gapHalvingPeriod, timestamp);\\n        }\\n    }\\n\\n    function forceTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override onlyEnterprise returns (bool) {\\n        _transfer(from, to, amount, true);\\n        return true;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 value,\\n        bool updateLockedBalance\\n    ) internal override {\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        if (from != address(0)) {\\n            State memory fromState = _states[from];\\n            fromState.energy = _getEnergy(fromState, from, timestamp);\\n            fromState.timestamp = timestamp;\\n            if (!updateLockedBalance) {\\n                require(balanceOf(from) - value >= fromState.lockedBalance, Errors.PT_INSUFFICIENT_AVAILABLE_BALANCE);\\n            } else {\\n                fromState.lockedBalance -= uint112(value);\\n            }\\n            _states[from] = fromState;\\n        }\\n\\n        if (to != address(0)) {\\n            State memory toState = _states[to];\\n            toState.energy = _getEnergy(toState, to, timestamp);\\n            toState.timestamp = timestamp;\\n            if (updateLockedBalance) {\\n                toState.lockedBalance += uint112(value);\\n            }\\n            _states[to] = toState;\\n        }\\n    }\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint112 baseRate,\\n            uint96 minGCFee,\\n            uint32 gapHalvingPeriod,\\n            uint16 index,\\n            IERC20Metadata baseToken,\\n            uint32 minLoanDuration,\\n            uint32 maxLoanDuration,\\n            uint16 serviceFeePercent,\\n            bool allowsPerpetual\\n        )\\n    {\\n        return (\\n            this.name(),\\n            this.symbol(),\\n            _baseRate,\\n            _minGCFee,\\n            _gapHalvingPeriod,\\n            _index,\\n            _baseToken,\\n            _minLoanDuration,\\n            _maxLoanDuration,\\n            _serviceFeePercent,\\n            _allowsPerpetual\\n        );\\n    }\\n\\n    /**\\n     * @dev Wraps liquidity tokens to perpetual PowerTokens\\n     *\\n     * One must approve sufficient amount of liquidity tokens to\\n     * corresponding PowerToken address before calling this function\\n     */\\n    function wrap(uint256 amount) external returns (bool) {\\n        return _wrapTo(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Wraps liquidity tokens to perpetual PowerTokens\\n     *\\n     * One must approve sufficient amount of liquidity tokens to\\n     * corresponding PowerToken address before calling this function\\n     */\\n    function wrapTo(address to, uint256 amount) external returns (bool) {\\n        return _wrapTo(to, amount);\\n    }\\n\\n    function _wrapTo(address to, uint256 amount) internal returns (bool) {\\n        require(_allowsPerpetual, Errors.E_WRAPPING_NOT_ALLOWED);\\n\\n        getEnterprise().getLiquidityToken().safeTransferFrom(msg.sender, address(this), amount);\\n        _mint(to, amount, false);\\n        return true;\\n    }\\n\\n    function unwrap(uint256 amount) external returns (bool) {\\n        _burn(msg.sender, amount, false);\\n        getEnterprise().getLiquidityToken().safeTransfer(msg.sender, amount);\\n        return true;\\n    }\\n\\n    function estimateLoan(\\n        IERC20 paymentToken,\\n        uint112 amount,\\n        uint32 duration\\n    ) external view returns (uint256) {\\n        (uint112 interest, uint112 serviceFee, uint112 gcFee) = _estimateLoanDetailed(paymentToken, amount, duration);\\n\\n        return interest + serviceFee + gcFee;\\n    }\\n\\n    /**\\n     * @dev Estimates loan cost divided into 3 parts:\\n     *  1) Pool interest\\n     *  2) Service operational fee\\n     *  3) Loan return lien\\n     */\\n    function estimateLoanDetailed(\\n        IERC20 paymentToken,\\n        uint112 amount,\\n        uint32 duration\\n    )\\n        external\\n        view\\n        returns (\\n            uint112 interest,\\n            uint112 serviceFee,\\n            uint112 gcFee\\n        )\\n    {\\n        return _estimateLoanDetailed(paymentToken, amount, duration);\\n    }\\n\\n    function _estimateLoanDetailed(\\n        IERC20 paymentToken,\\n        uint112 amount,\\n        uint32 duration\\n    )\\n        internal\\n        view\\n        returns (\\n            uint112 interest,\\n            uint112 serviceFee,\\n            uint112 gcFee\\n        )\\n    {\\n        require(getEnterprise().isSupportedPaymentToken(paymentToken), Errors.E_UNSUPPORTED_INTEREST_PAYMENT_TOKEN);\\n        require(isAllowedLoanDuration(duration), Errors.E_LOAN_DURATION_OUT_OF_RANGE);\\n\\n        uint112 loanBaseCost = estimateCost(amount, duration);\\n        uint256 loanCost = getEnterprise().getConverter().estimateConvert(_baseToken, loanBaseCost, paymentToken);\\n\\n        serviceFee = uint112((loanCost * _serviceFeePercent) / 10_000);\\n        interest = uint112(loanCost - serviceFee);\\n        gcFee = _estimateGCFee(paymentToken, loanCost);\\n    }\\n\\n    function _estimateGCFee(IERC20 paymentToken, uint256 amount) internal view returns (uint112) {\\n        uint112 gcFeeAmount = uint112((amount * getEnterprise().getGCFeePercent()) / 10_000);\\n        uint112 minGcFee = uint112(getEnterprise().getConverter().estimateConvert(_baseToken, _minGCFee, paymentToken));\\n        return gcFeeAmount < minGcFee ? minGcFee : gcFeeAmount;\\n    }\\n\\n    function notifyNewLoan(uint256 borrowTokenId) external {}\\n\\n    /**\\n     * @dev\\n     * f(x) = ((1 - t) * k) / (x - t) + (1 - k)\\n     * h(x) = x * f((T - x) / T)\\n     * g(x) = h(U + x) - h(U)\\n     */\\n    function estimateCost(uint112 amount, uint32 duration) internal view returns (uint112) {\\n        uint256 availableReserve = getEnterprise().getAvailableReserve();\\n        if (availableReserve <= amount) return type(uint112).max;\\n\\n        int8 decimalsDiff = int8(getEnterprise().getLiquidityToken().decimals()) - int8(_baseToken.decimals());\\n\\n        (uint256 pole, uint256 slope) = getEnterprise().getBondingCurve();\\n\\n        uint256 basePrice = g(amount, pole, slope) * duration;\\n\\n        if (decimalsDiff > 0) {\\n            basePrice = ((basePrice * _baseRate) / 10**uint8(decimalsDiff)) >> 64;\\n        } else if (decimalsDiff < 0) {\\n            basePrice = ((basePrice * _baseRate) * 10**(uint8(-decimalsDiff))) >> 64;\\n        } else {\\n            basePrice = (basePrice * _baseRate) >> 64;\\n        }\\n        return uint112(basePrice);\\n    }\\n\\n    function g(\\n        uint128 x,\\n        uint256 pole,\\n        uint256 slope\\n    ) internal view returns (uint256) {\\n        uint256 usedReserve = getEnterprise().getUsedReserve();\\n        uint256 reserve = getEnterprise().getReserve();\\n\\n        return h(usedReserve + x, pole, slope, reserve) - h(usedReserve, pole, slope, reserve);\\n    }\\n\\n    function h(\\n        uint256 x,\\n        uint256 pole,\\n        uint256 slope,\\n        uint256 reserve\\n    ) internal pure returns (uint256) {\\n        return (x * f(uint128(((reserve - x) << 64) / reserve), pole, slope)) >> 64;\\n    }\\n\\n    function f(\\n        uint256 x,\\n        uint256 pole,\\n        uint256 slope\\n    ) internal pure returns (uint256) {\\n        if (x <= pole) return type(uint128).max;\\n        return (((ONE - pole) * slope)) / (x - pole) + (ONE - slope);\\n    }\\n}\\n\",\"keccak256\":\"0xf544ef7aea1a6a381388fe6a7904bbcadef1f5ab5a5876e99b0cffec9a321e85\",\"license\":\"UNLICENSED\"},\"contracts/PowerTokenStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./EnterpriseOwnable.sol\\\";\\nimport \\\"./libs/Errors.sol\\\";\\n\\nabstract contract PowerTokenStorage is EnterpriseOwnable {\\n    uint16 internal constant MAX_SERVICE_FEE_PERCENT = 5000; // 50%\\n    struct State {\\n        uint112 lockedBalance;\\n        uint112 energy;\\n        uint32 timestamp;\\n    }\\n    // slot 1, 0 bytes left\\n    uint112 internal _baseRate; // base rate for price calculations, nominated in baseToken\\n    uint96 internal _minGCFee; // fee for collecting expired PowerTokens\\n    uint32 internal _gapHalvingPeriod; // fixed, not updatable\\n    uint16 internal _index; // index in _powerTokens array. Not updatable\\n    // slot 2, 1 byte left\\n    IERC20Metadata internal _baseToken;\\n    uint32 internal _minLoanDuration;\\n    uint32 internal _maxLoanDuration;\\n    uint16 internal _serviceFeePercent; // 100 is 1%, 10_000 is 100%. Fee which goes to the enterprise to cover service operational costs for this service\\n    bool internal _allowsPerpetual; // allows wrapping tokens into perpetual PowerTokens\\n\\n    mapping(address => State) internal _states;\\n\\n    event BaseRateChanged(uint112 baseRate, address baseToken, uint96 minGCFee);\\n    event ServiceFeePercentChanged(uint16 percent);\\n    event LoanDurationLimitsChanged(uint32 minDuration, uint32 maxDuration);\\n    event PerpetualAllowed();\\n\\n    function initialize(\\n        Enterprise enterprise,\\n        uint112 baseRate,\\n        uint96 minGCFee,\\n        uint32 gapHalvingPeriod,\\n        uint16 index,\\n        IERC20Metadata baseToken,\\n        uint32 minLoanDuration,\\n        uint32 maxLoanDuration,\\n        uint16 serviceFeePercent,\\n        bool allowsPerpetual\\n    ) external {\\n        require(_gapHalvingPeriod == 0, Errors.ALREADY_INITIALIZED);\\n        require(gapHalvingPeriod > 0, Errors.E_SERVICE_GAP_HALVING_PERIOD_NOT_GT_0);\\n        require(serviceFeePercent <= MAX_SERVICE_FEE_PERCENT, Errors.ES_MAX_SERVICE_FEE_PERCENT_EXCEEDED);\\n        require(_minLoanDuration <= _maxLoanDuration, Errors.E_INVALID_LOAN_DURATION_RANGE);\\n\\n        EnterpriseOwnable.initialize(enterprise);\\n        _baseRate = baseRate;\\n        _minGCFee = minGCFee;\\n        _gapHalvingPeriod = gapHalvingPeriod;\\n        _index = index;\\n        _baseToken = baseToken;\\n        _minLoanDuration = minLoanDuration;\\n        _maxLoanDuration = maxLoanDuration;\\n        _serviceFeePercent = serviceFeePercent;\\n        _allowsPerpetual = allowsPerpetual;\\n        emit BaseRateChanged(baseRate, address(baseToken), minGCFee);\\n        emit ServiceFeePercentChanged(serviceFeePercent);\\n        emit LoanDurationLimitsChanged(minLoanDuration, maxLoanDuration);\\n        if (allowsPerpetual) {\\n            emit PerpetualAllowed();\\n        }\\n    }\\n\\n    function setBaseRate(\\n        uint112 baseRate,\\n        IERC20Metadata baseToken,\\n        uint96 minGCFee\\n    ) external onlyEnterpriseOwner {\\n        require(address(_baseToken) != address(0), Errors.ES_INVALID_BASE_TOKEN_ADDRESS);\\n\\n        _baseRate = baseRate;\\n        _baseToken = baseToken;\\n        _minGCFee = minGCFee;\\n\\n        emit BaseRateChanged(baseRate, address(baseToken), minGCFee);\\n    }\\n\\n    function setServiceFeePercent(uint16 newServiceFeePercent) external onlyEnterpriseOwner {\\n        require(newServiceFeePercent <= MAX_SERVICE_FEE_PERCENT, Errors.ES_MAX_SERVICE_FEE_PERCENT_EXCEEDED);\\n\\n        _serviceFeePercent = newServiceFeePercent;\\n        emit ServiceFeePercentChanged(newServiceFeePercent);\\n    }\\n\\n    function setLoanDurationLimits(uint32 minLoanDuration, uint32 maxLoanDuration) external onlyEnterpriseOwner {\\n        require(minLoanDuration <= maxLoanDuration, Errors.ES_INVALID_LOAN_DURATION_RANGE);\\n\\n        _minLoanDuration = minLoanDuration;\\n        _maxLoanDuration = maxLoanDuration;\\n        emit LoanDurationLimitsChanged(minLoanDuration, maxLoanDuration);\\n    }\\n\\n    function allowPerpetualForever() external onlyEnterpriseOwner {\\n        require(!_allowsPerpetual, Errors.ES_PERPETUAL_TOKENS_ALREADY_ALLOWED);\\n\\n        _allowsPerpetual = true;\\n        emit PerpetualAllowed();\\n    }\\n\\n    function isAllowedLoanDuration(uint32 duration) public view returns (bool) {\\n        return _minLoanDuration <= duration && duration <= _maxLoanDuration;\\n    }\\n\\n    function getBaseRate() external view returns (uint112) {\\n        return _baseRate;\\n    }\\n\\n    function getMinGCFee() external view returns (uint96) {\\n        return _minGCFee;\\n    }\\n\\n    function getGapHalvingPeriod() external view returns (uint32) {\\n        return _gapHalvingPeriod;\\n    }\\n\\n    function getIndex() external view returns (uint16) {\\n        return _index;\\n    }\\n\\n    function getBaseToken() external view returns (IERC20Metadata) {\\n        return _baseToken;\\n    }\\n\\n    function getMinLoanDuration() external view returns (uint32) {\\n        return _minLoanDuration;\\n    }\\n\\n    function getMaxLoanDuration() external view returns (uint32) {\\n        return _maxLoanDuration;\\n    }\\n\\n    function getServiceFeePercent() external view returns (uint16) {\\n        return _serviceFeePercent;\\n    }\\n\\n    function getAllowsPerpetual() external view returns (bool) {\\n        return _allowsPerpetual;\\n    }\\n\\n    function getState(address account) external view returns (State memory) {\\n        return _states[account];\\n    }\\n}\\n\",\"keccak256\":\"0xe47b9e66a9632900aca8797bc82359b1825912b12ddd1b0670c7beca22b22440\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBorrowToken is IERC721 {\\n    function mint(address to) external returns (uint256);\\n\\n    function burn(uint256 tokenId, address burner) external;\\n\\n    function getNextTokenId() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc98cb765ccabaf753824d96d75fee77d1eddb85324f4f974d658db71820dc648\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IConverter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * Currency converter interface.\\n */\\ninterface IConverter {\\n    /**\\n     * After calling this function it is expected that requested currency will be\\n     * transferred to the msg.sender automatically\\n     */\\n    function convert(\\n        IERC20 source,\\n        uint256 amount,\\n        IERC20 target\\n    ) external returns (uint256);\\n\\n    /**\\n     * Estimates conversion of `source` currency into `target` currency\\n     */\\n    function estimateConvert(\\n        IERC20 source,\\n        uint256 amount,\\n        IERC20 target\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x99442cf8b3c7c52633eae071b037f99582bed4b84f37b7069d0c98e56cafe678\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IInterestToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IInterestToken is IERC721Enumerable {\\n    function mint(address to) external returns (uint256);\\n\\n    function burn(uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0x0c3c583428cc640be18e1e3c7a630e5cf828acc9dfbec3914579994e011b0155\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IPowerToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPowerToken is IERC20Metadata {\\n    function forceTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x031eb167298349ef4bd496007424baa795bcfe65a5dbffe0f4d415f2f3daf836\",\"license\":\"UNLICENSED\"},\"contracts/libs/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\n\\n/**\\n * @title Errors library\\n * @dev Error messages prefix glossary:\\n *  - EXP = ExpMath\\n *  - ERC20 = ERC20\\n *  - ERC721 = ERC721\\n *  - ERC721META = ERC721Metadata\\n *  - ERC721ENUM = ERC721Enumerable\\n *  - DC = DefaultConverter\\n *  - DE = DefaultEstimator\\n *  - E = Enterprise\\n *  - EO = EnterpriseOwnable\\n *  - ES = EnterpriseStorage\\n *  - IO = InitializableOwnable\\n *  - PT = PowerToken\\n */\\nlibrary Errors {\\n    // common errors\\n    string internal constant NOT_INITIALIZED = \\\"1\\\";\\n    string internal constant ALREADY_INITIALIZED = \\\"2\\\";\\n    string internal constant CALLER_NOT_OWNER = \\\"3\\\";\\n    string internal constant CALLER_NOT_ENTERPRISE = \\\"4\\\";\\n    string internal constant INVALID_ADDRESS = \\\"5\\\";\\n    string internal constant UNREGISTERED_POWER_TOKEN = \\\"6\\\";\\n    string internal constant INVALID_ARRAY_LENGTH = \\\"7\\\";\\n\\n    // contract specific errors\\n    string internal constant EXP_INVALID_PERIOD = \\\"8\\\";\\n\\n    string internal constant ERC20_INVALID_PERIOD = \\\"9\\\";\\n    string internal constant ERC20_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE = \\\"10\\\";\\n    string internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = \\\"11\\\";\\n    string internal constant ERC20_TRANSFER_FROM_THE_ZERO_ADDRESS = \\\"12\\\";\\n    string internal constant ERC20_TRANSFER_TO_THE_ZERO_ADDRESS = \\\"13\\\";\\n    string internal constant ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE = \\\"14\\\";\\n    string internal constant ERC20_MINT_TO_THE_ZERO_ADDRESS = \\\"15\\\";\\n    string internal constant ERC20_BURN_FROM_THE_ZERO_ADDRESS = \\\"16\\\";\\n    string internal constant ERC20_BURN_AMOUNT_EXCEEDS_BALANCE = \\\"17\\\";\\n    string internal constant ERC20_APPROVE_FROM_THE_ZERO_ADDRESS = \\\"18\\\";\\n    string internal constant ERC20_APPROVE_TO_THE_ZERO_ADDRESS = \\\"19\\\";\\n\\n    string internal constant ERC721_BALANCE_QUERY_FOR_THE_ZERO_ADDRESS = \\\"20\\\";\\n    string internal constant ERC721_OWNER_QUERY_FOR_NONEXISTENT_TOKEN = \\\"21\\\";\\n    string internal constant ERC721_APPROVAL_TO_CURRENT_OWNER = \\\"22\\\";\\n    string internal constant ERC721_APPROVE_CALLER_IS_NOT_OWNER_NOR_APPROVED_FOR_ALL = \\\"23\\\";\\n    string internal constant ERC721_APPROVED_QUERY_FOR_NONEXISTENT_TOKEN = \\\"24\\\";\\n    string internal constant ERC721_APPROVE_TO_CALLER = \\\"25\\\";\\n    string internal constant ERC721_TRANSFER_CALLER_IS_NOT_OWNER_NOR_APPROVED = \\\"26\\\";\\n    string internal constant ERC721_TRANSFER_TO_NON_ERC721RECEIVER_IMPLEMENTER = \\\"27\\\";\\n    string internal constant ERC721_OPERATOR_QUERY_FOR_NONEXISTENT_TOKEN = \\\"28\\\";\\n    string internal constant ERC721_MINT_TO_THE_ZERO_ADDRESS = \\\"29\\\";\\n    string internal constant ERC721_TOKEN_ALREADY_MINTED = \\\"30\\\";\\n    string internal constant ERC721_TRANSFER_OF_TOKEN_THAT_IS_NOT_OWN = \\\"31\\\";\\n    string internal constant ERC721_TRANSFER_TO_THE_ZERO_ADDRESS = \\\"32\\\";\\n\\n    string internal constant ERC721META_URI_QUERY_FOR_NONEXISTENT_TOKEN = \\\"33\\\";\\n\\n    string internal constant ERC721ENUM_OWNER_INDEX_OUT_OF_BOUNDS = \\\"34\\\";\\n    string internal constant ERC721ENUM_GLOBAL_INDEX_OUT_OF_BOUNDS = \\\"35\\\";\\n\\n    string internal constant DC_UNSUPPORTED_PAIR = \\\"36\\\";\\n\\n    string internal constant DE_INVALID_ENTERPRISE_ADDRESS = \\\"37\\\";\\n    string internal constant DE_LABMDA_NOT_GT_0 = \\\"38\\\";\\n\\n    string internal constant E_CALLER_NOT_BORROW_TOKEN = \\\"39\\\";\\n    string internal constant E_INVALID_BASE_TOKEN_ADDRESS = \\\"40\\\";\\n    string internal constant E_SERVICE_LIMIT_REACHED = \\\"41\\\";\\n    string internal constant E_INVALID_LOAN_DURATION_RANGE = \\\"42\\\";\\n    string internal constant E_SERVICE_GAP_HALVING_PERIOD_NOT_GT_0 = \\\"43\\\";\\n    string internal constant E_UNSUPPORTED_INTEREST_PAYMENT_TOKEN = \\\"44\\\"; // Interest payment token is disabled or not supported\\n    string internal constant E_LOAN_DURATION_OUT_OF_RANGE = \\\"45\\\"; // Loan duration is out of allowed range\\n    string internal constant E_INSUFFICIENT_LIQUIDITY = \\\"46\\\";\\n    string internal constant E_LOAN_COST_SLIPPAGE = \\\"47\\\"; // Effective loan cost exceeds max payment limit set by borrower\\n    string internal constant E_INVALID_LOAN_TOKEN_ID = \\\"48\\\";\\n    string internal constant E_INVALID_LOAN_DURATION = \\\"49\\\";\\n    string internal constant E_FLASH_LIQUIDITY_REMOVAL = \\\"50\\\"; // Adding and removing liquidity in the same block is not allowed\\n    string internal constant E_WRAPPING_NOT_ALLOWED = \\\"51\\\";\\n    string internal constant E_LOAN_TRANSFER_NOT_ALLOWED = \\\"52\\\";\\n    string internal constant E_INVALID_CALLER_WITHIN_BORROWER_GRACE_PERIOD = \\\"53\\\"; // Only borrower can return within borrower grace period\\n    string internal constant E_INVALID_CALLER_WITHIN_ENTERPRISE_GRACE_PERIOD = \\\"54\\\"; // Only borrower or enterprise can return within enterprise grace period\\n\\n    string internal constant EF_INVALID_ENTERPRISE_IMPLEMENTATION_ADDRESS = \\\"55\\\";\\n    string internal constant EF_INVALID_POWER_TOKEN_IMPLEMENTATION_ADDRESS = \\\"56\\\";\\n    string internal constant EF_INVALID_INTEREST_TOKEN_IMPLEMENTATION_ADDRESS = \\\"57\\\";\\n    string internal constant EF_INVALID_BORROW_TOKEN_IMPLEMENTATION_ADDRESS = \\\"58\\\";\\n\\n    string internal constant EO_INVALID_ENTERPRISE_ADDRESS = \\\"59\\\";\\n\\n    string internal constant ES_INVALID_ESTIMATOR_ADDRESS = \\\"60\\\";\\n    string internal constant ES_INVALID_COLLECTOR_ADDRESS = \\\"61\\\";\\n    string internal constant ES_INVALID_VAULT_ADDRESS = \\\"62\\\";\\n    string internal constant ES_INVALID_CONVERTER_ADDRESS = \\\"63\\\";\\n    string internal constant ES_INVALID_BORROWER_LOAN_RETURN_GRACE_PERIOD = \\\"64\\\";\\n    string internal constant ES_INVALID_ENTERPRISE_LOAN_COLLECT_GRACE_PERIOD = \\\"65\\\";\\n    string internal constant ES_INTEREST_GAP_HALVING_PERIOD_NOT_GT_0 = \\\"66\\\";\\n    string internal constant ES_MAX_SERVICE_FEE_PERCENT_EXCEEDED = \\\"67\\\";\\n    string internal constant ES_INVALID_BASE_TOKEN_ADDRESS = \\\"68\\\";\\n    string internal constant ES_INVALID_LOAN_DURATION_RANGE = \\\"69\\\";\\n    string internal constant ES_PERPETUAL_TOKENS_ALREADY_ALLOWED = \\\"70\\\";\\n    string internal constant ES_INVALID_PAYMENT_TOKEN_ADDRESS = \\\"71\\\";\\n    string internal constant ES_UNREGISTERED_PAYMENT_TOKEN = \\\"72\\\";\\n\\n    string internal constant IO_INVALID_OWNER_ADDRESS = \\\"73\\\";\\n\\n    string internal constant PT_INSUFFICIENT_AVAILABLE_BALANCE = \\\"74\\\";\\n\\n    string internal constant E_ENTERPRISE_SHUTDOWN = \\\"75\\\";\\n    string internal constant E_INVALID_LOAN_AMOUNT = \\\"76\\\";\\n    string internal constant ES_INVALID_BONDING_POLE = \\\"77\\\";\\n    string internal constant ES_INVALID_BONDING_SLOPE = \\\"78\\\";\\n}\\n\",\"keccak256\":\"0x37248b9cc0ea8c812af235f81a40c965cf65e7c9ae6324a7b2dd4905f01e36f2\",\"license\":\"UNLICENSED\"},\"contracts/math/ExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.4;\\nimport \\\"../libs/Errors.sol\\\";\\n\\nlibrary ExpMath {\\n    uint256 private constant ONE = 1 << 144;\\n    uint256 private constant LOG_ONE_HALF = 15457698658747239244624307340191628289589491; // log(0.5) * 2 ** 144\\n\\n    function halfLife(\\n        uint32 t0,\\n        uint112 c0,\\n        uint32 t12,\\n        uint32 t\\n    ) internal pure returns (uint112) {\\n        unchecked {\\n            require(t >= t0, Errors.EXP_INVALID_PERIOD);\\n\\n            t -= t0;\\n            c0 >>= t / t12;\\n            t %= t12;\\n            if (t == 0 || c0 == 0) return c0;\\n\\n            uint256 sum = 0;\\n            uint256 z = c0;\\n            uint256 x = (LOG_ONE_HALF * t) / t12;\\n            uint256 i = ONE;\\n\\n            while (z != 0) {\\n                sum += z;\\n                z = (z * x) / i;\\n                i += ONE;\\n                sum -= z;\\n                z = (z * x) / i;\\n                i += ONE;\\n            }\\n\\n            return uint112(sum);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x38f02b6f80329e04f5056c03ee033fbb4fcba672a4e0f0c0b5412f0a2051b062\",\"license\":\"UNLICENSED\"},\"contracts/token/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libs/Errors.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(\\n        string memory name_,\\n        string memory symbol_,\\n        uint8 decimals_\\n    ) external {\\n        require(bytes(_name).length == 0, Errors.ALREADY_INITIALIZED);\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view virtual override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) external virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount, false);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _transfer(sender, recipient, amount, false);\\n\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        require(currentAllowance >= amount, Errors.ERC20_TRANSFER_AMOUNT_EXCEEDS_ALLOWANCE);\\n        _approve(sender, msg.sender, currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[msg.sender][spender];\\n        require(currentAllowance >= subtractedValue, Errors.ERC20_DECREASED_ALLOWANCE_BELOW_ZERO);\\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bool updateLockedBalance\\n    ) internal virtual {\\n        require(sender != address(0), Errors.ERC20_TRANSFER_FROM_THE_ZERO_ADDRESS);\\n        require(recipient != address(0), Errors.ERC20_TRANSFER_TO_THE_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(sender, recipient, amount, updateLockedBalance);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, Errors.ERC20_TRANSFER_AMOUNT_EXCEEDS_BALANCE);\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bool updateLockedBalance\\n    ) internal virtual {\\n        require(account != address(0), Errors.ERC20_MINT_TO_THE_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(address(0), account, amount, updateLockedBalance);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 amount,\\n        bool updateLockedBalance\\n    ) internal virtual {\\n        require(account != address(0), Errors.ERC20_BURN_FROM_THE_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(account, address(0), amount, updateLockedBalance);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, Errors.ERC20_BURN_AMOUNT_EXCEEDS_BALANCE);\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), Errors.ERC20_APPROVE_FROM_THE_ZERO_ADDRESS);\\n        require(spender != address(0), Errors.ERC20_APPROVE_TO_THE_ZERO_ADDRESS);\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool updateLockedBalance\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0d772ac2441121d69f56371dd06a0e3728e75bde6acbd22529472c229675388a\",\"license\":\"MIT\"},\"contracts/token/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../libs/Errors.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function initialize(string memory name_, string memory symbol_) public {\\n        require(bytes(_name).length == 0, Errors.ALREADY_INITIALIZED);\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), Errors.ERC721_BALANCE_QUERY_FOR_THE_ZERO_ADDRESS);\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), Errors.ERC721_OWNER_QUERY_FOR_NONEXISTENT_TOKEN);\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() external view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() external view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\\n        require(_exists(tokenId), Errors.ERC721META_URI_QUERY_FOR_NONEXISTENT_TOKEN);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. Empty by default, can be overridden\\n     * in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) external virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, Errors.ERC721_APPROVAL_TO_CURRENT_OWNER);\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            Errors.ERC721_APPROVE_CALLER_IS_NOT_OWNER_NOR_APPROVED_FOR_ALL\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), Errors.ERC721_APPROVED_QUERY_FOR_NONEXISTENT_TOKEN);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external virtual override {\\n        require(operator != msg.sender, Errors.ERC721_APPROVE_TO_CALLER);\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(msg.sender, tokenId), Errors.ERC721_TRANSFER_CALLER_IS_NOT_OWNER_NOR_APPROVED);\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId), Errors.ERC721_TRANSFER_CALLER_IS_NOT_OWNER_NOR_APPROVED);\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, _data),\\n            Errors.ERC721_TRANSFER_TO_NON_ERC721RECEIVER_IMPLEMENTER\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), Errors.ERC721_OPERATOR_QUERY_FOR_NONEXISTENT_TOKEN);\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            Errors.ERC721_TRANSFER_TO_NON_ERC721RECEIVER_IMPLEMENTER\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), Errors.ERC721_MINT_TO_THE_ZERO_ADDRESS);\\n        require(!_exists(tokenId), Errors.ERC721_TOKEN_ALREADY_MINTED);\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, Errors.ERC721_TRANSFER_OF_TOKEN_THAT_IS_NOT_OWN);\\n        require(to != address(0), Errors.ERC721_TRANSFER_TO_THE_ZERO_ADDRESS);\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(Errors.ERC721_TRANSFER_TO_NON_ERC721RECEIVER_IMPLEMENTER);\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4a50b37a78b9c06d00b7eb7d8fde59cf52dc81acff9ecb0d260d54eb743bd252\",\"license\":\"MIT\"},\"contracts/token/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"./ERC721.sol\\\";\\n\\n/**\\n * This is a copy of OpenZeppelin ERC721Enumerable contract\\n */\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), Errors.ERC721ENUM_OWNER_INDEX_OUT_OF_BOUNDS);\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) external view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), Errors.ERC721ENUM_GLOBAL_INDEX_OUT_OF_BOUNDS);\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xbd007bc1c59577095d84aad0c77aded77308a5f95e5385a5a9762a30dbddf818\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620024893803806200248983398101604081905262000035916200019b565b604080518082019091526002815261353560f01b60208201526001600160a01b038516620000815760405162461bcd60e51b8152600401620000789190620001f7565b60405180910390fd5b506040805180820190915260028152611a9b60f11b60208201526001600160a01b038416620000c55760405162461bcd60e51b8152600401620000789190620001f7565b50604080518082019091526002815261353760f01b60208201526001600160a01b038316620001095760405162461bcd60e51b8152600401620000789190620001f7565b5060408051808201909152600281526106a760f31b60208201526001600160a01b0382166200014d5760405162461bcd60e51b8152600401620000789190620001f7565b506001600160601b0319606094851b811660805292841b831660a05290831b821660c05290911b1660e0526200024d565b80516001600160a01b03811681146200019657600080fd5b919050565b60008060008060808587031215620001b1578384fd5b620001bc856200017e565b9350620001cc602086016200017e565b9250620001dc604086016200017e565b9150620001ec606086016200017e565b905092959194509250565b6000602080835283518082850152825b81811015620002255785810183015185820160400152820162000207565b81811115620002375783604083870101525b50601f01601f1916929092016040019392505050565b60805160601c60a05160601c60c05160601c60e05160601c6121dd620002ac6000396000818160a0015261063f01526000818161012c015261055001526000818160ee015261047201526000818160c7015261018a01526121dd6000f3fe60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806335ff0aef146200006f57806362832955146200009e57806382f9340914620000c557806383b9a00914620000ec578063c31011cc1462000113578063d2c598b5146200012a575b600080fd5b6200008662000080366004620006f0565b62000151565b60405162000095919062000969565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000062000086565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b6200008662000124366004620006ca565b6200046a565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b600080604051620001629062000665565b604051809103906000f0801580156200017f573d6000803e3d6000fd5b5090506000620001b07f0000000000000000000000000000000000000000000000000000000000000000836200049e565b60405163f2fde38b60e01b81529091506001600160a01b0383169063f2fde38b90620001e190849060040162000969565b600060405180830381600087803b158015620001fc57600080fd5b505af115801562000211573d6000803e3d6000fd5b5050604051636815f33760e01b81526001600160a01b0384169250636815f337915062000251908d908d908c908c908c908c908b903390600401620009c3565b600060405180830381600087803b1580156200026c57600080fd5b505af115801562000281573d6000803e3d6000fd5b5050505060006200030c896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002c557600080fd5b505afa158015620002da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003049190810190620007a9565b8385620004fb565b90506000620003958a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200034e57600080fd5b505afa15801562000363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200038d9190810190620007a9565b8486620005ea565b60405163ef1f9f3960e01b81526001600160a01b038c81166004830152848116602483015280831660448301529192509084169063ef1f9f3990606401600060405180830381600087803b158015620003ed57600080fd5b505af115801562000402573d6000803e3d6000fd5b505050505050876001600160a01b0316336001600160a01b03167faf94cde051ff1210197fe31203f2210a396ffd110ab74cf8014d6bfd600842d58c8c8b8b87604051620004559594939291906200097d565b60405180910390a39998505050505050505050565b6000620004987f0000000000000000000000000000000000000000000000000000000000000000836200049e565b92915050565b60008282604051620004b09062000673565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620004f3573d6000803e3d6000fd5b509392505050565b60008084604051602001620005119190620008b4565b60405160208183030381529060405290506000856040516020016200053791906200094b565b60405160208183030381529060405290506000620005767f0000000000000000000000000000000000000000000000000000000000000000866200049e565b6040516303bf912560e11b81529091506001600160a01b0382169063077f224a90620005ab90869086908b9060040162000a25565b600060405180830381600087803b158015620005c657600080fd5b505af1158015620005db573d6000803e3d6000fd5b50929998505050505050505050565b60008084604051602001620006009190620008ef565b604051602081830303815290604052905060008560405160200162000626919062000920565b60405160208183030381529060405290506000620005767f0000000000000000000000000000000000000000000000000000000000000000866200049e565b6107d28062000aca83390190565b610f0c806200129c83390190565b60008083601f84011262000693578182fd5b5081356001600160401b03811115620006aa578182fd5b602083019150836020828501011115620006c357600080fd5b9250929050565b600060208284031215620006dc578081fd5b8135620006e98162000ab0565b9392505050565b600080600080600080600060a0888a0312156200070b578283fd5b87356001600160401b038082111562000722578485fd5b620007308b838c0162000681565b909950975060208a01359150620007478262000ab0565b909550604089013590808211156200075d578485fd5b506200076c8a828b0162000681565b909550935050606088013561ffff8116811462000787578283fd5b91506080880135620007998162000ab0565b8091505092959891949750929550565b600060208284031215620007bb578081fd5b81516001600160401b0380821115620007d2578283fd5b818401915084601f830112620007e6578283fd5b815181811115620007fb57620007fb62000a9a565b604051601f8201601f19908116603f0116810190838211818310171562000826576200082662000a9a565b816040528281528760208487010111156200083f578586fd5b6200085283602083016020880162000a67565b979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452620008a081602086016020860162000a67565b601f01601f19169290920160200192915050565b70024b73a32b932b9ba102132b0b934b7339607d1b815260008251620008e281601185016020870162000a67565b9190910160110192915050565b6602137b93937bb960cd1b8152600082516200091381600785016020870162000a67565b9190910160070192915050565b603160f91b8152600082516200093e81600185016020870162000a67565b9190910160010192915050565b606960f81b8152600082516200093e81600185016020870162000a67565b6001600160a01b0391909116815260200190565b606081526000620009936060830187896200085d565b8281036020840152620009a88186886200085d565b91505060018060a01b03831660408301529695505050505050565b60c081526000620009d960c083018a8c6200085d565b8281036020840152620009ee81898b6200085d565b61ffff97909716604084015250506001600160a01b039384166060820152918316608083015290911660a090910152949350505050565b60608152600062000a3a606083018662000886565b828103602084015262000a4e818662000886565b91505060018060a01b0383166040830152949350505050565b60005b8381101562000a8457818101518382015260200162000a6a565b8381111562000a94576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ac657600080fd5b5056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610771806100616000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100f257806399a88ec414610105578063f2fde38b14610125578063f3b7dead14610145575b600080fd5b34801561007c57600080fd5b5061009061008b3660046104fa565b610165565b60405161009d9190610641565b60405180910390f35b3480156100b257600080fd5b506100bb6101f6565b005b3480156100c957600080fd5b506100bb6100d8366004610539565b610266565b3480156100e957600080fd5b506100906102f7565b6100bb610100366004610571565b610306565b34801561011157600080fd5b506100bb610120366004610539565b61039c565b34801561013157600080fd5b506100bb6101403660046104fa565b6103f7565b34801561015157600080fd5b506100906101603660046104fa565b6104d4565b6000806000836001600160a01b031660405161018b90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b5091509150816101da57600080fd5b808060200190518101906101ee919061051d565b949350505050565b336101ff6102f7565b6001600160a01b03161461022e5760405162461bcd60e51b8152600401610225906106b8565b60405180910390fd5b600080546040516001600160a01b039091169060008051602061071c833981519152908390a3600080546001600160a01b0319169055565b3361026f6102f7565b6001600160a01b0316146102955760405162461bcd60e51b8152600401610225906106b8565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102c1908490600401610641565b600060405180830381600087803b1580156102db57600080fd5b505af11580156102ef573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b3361030f6102f7565b6001600160a01b0316146103355760405162461bcd60e51b8152600401610225906106b8565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103659086908690600401610655565b6000604051808303818588803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b5050505050505050565b336103a56102f7565b6001600160a01b0316146103cb5760405162461bcd60e51b8152600401610225906106b8565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe6906102c1908490600401610641565b336104006102f7565b6001600160a01b0316146104265760405162461bcd60e51b8152600401610225906106b8565b6001600160a01b03811661048b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b600080546040516001600160a01b038085169392169160008051602061071c83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b031660405161018b906303e1469160e61b815260040190565b60006020828403121561050b578081fd5b813561051681610703565b9392505050565b60006020828403121561052e578081fd5b815161051681610703565b6000806040838503121561054b578081fd5b823561055681610703565b9150602083013561056681610703565b809150509250929050565b600080600060608486031215610585578081fd5b833561059081610703565b925060208401356105a081610703565b915060408401356001600160401b03808211156105bb578283fd5b818601915086601f8301126105ce578283fd5b8135818111156105e0576105e06106ed565b604051601f8201601f19908116603f01168101908382118183101715610608576106086106ed565b81604052828152896020848701011115610620578586fd5b82602086016020830137856020848301015280955050505050509250925092565b6001600160a01b0391909116815260200190565b60018060a01b0383168152600060206040818401528351806040850152825b8181101561069057858101830151858201606001528201610674565b818111156106a15783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071857600080fd5b5056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212209f58ddf2e62e932313ef03a43663de644f281755cb24cf59c7579808f4a16aa264736f6c63430008040033608060405260405162000f0c38038062000f0c8339810160408190526200002691620004cc565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005fb565b60008051602062000ec5833981519152146200008157634e487b7160e01b600052600160045260246000fd5b6200008f82826000620000ff565b50620000bf905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005fb565b60008051602062000ea583398151915214620000eb57634e487b7160e01b600052600160045260246000fd5b620000f68262000170565b50505062000664565b6200010a83620001cb565b6040516001600160a01b038416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a26000825111806200014c5750805b156200016b576200016983836200029360201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200019b620002c2565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001c881620002fb565b50565b620001e1816200038b60201b6200028c1760201c565b620002495760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806200027260008051602062000ec583398151915260001b6200039160201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060620002bb838360405180606001604052806027815260200162000ee56027913962000394565b9392505050565b6000620002ec60008051602062000ea583398151915260001b6200039160201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620003625760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840162000240565b806200027260008051602062000ea583398151915260001b6200039160201b620002081760201c565b3b151590565b90565b6060833b620003f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000240565b600080856001600160a01b031685604051620004129190620005a8565b600060405180830381855af49150503d80600081146200044f576040519150601f19603f3d011682016040523d82523d6000602084013e62000454565b606091505b5090925090506200046782828662000471565b9695505050505050565b6060831562000482575081620002bb565b825115620004935782518084602001fd5b8160405162461bcd60e51b8152600401620002409190620005c6565b80516001600160a01b0381168114620004c757600080fd5b919050565b600080600060608486031215620004e1578283fd5b620004ec84620004af565b9250620004fc60208501620004af565b60408501519092506001600160401b038082111562000519578283fd5b818601915086601f8301126200052d578283fd5b8151818111156200054257620005426200064e565b604051601f8201601f19908116603f011681019083821181831017156200056d576200056d6200064e565b8160405282815289602084870101111562000586578586fd5b620005998360208301602088016200061f565b80955050505050509250925092565b60008251620005bc8184602087016200061f565b9190910192915050565b6020815260008251806020840152620005e78160408501602087016200061f565b601f01601f19169190910160400192915050565b6000828210156200061a57634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156200063c57818101518382015260200162000622565b83811115620001695750506000910152565b634e487b7160e01b600052604160045260246000fd5b61083180620006746000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b610080366004610682565b610118565b61005b61009336600461069c565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e4366004610682565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610380565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610380915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103df565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107d560279139610433565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb610507565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60006000805160206107958339815191525b546001600160a01b0316919050565b6103898361051d565b6040516001600160a01b038416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a26000825111806103ca5750805b156101c3576103d98383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61040861035f565b604080516001600160a01b03928316815291841660208301520160405180910390a1610154816105b3565b6060833b6104925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b0316856040516104ad9190610719565b600060405180830381855af49150503d80600081146104e8576040519150601f19603f3d011682016040523d82523d6000602084013e6104ed565b606091505b50915091506104fd82828661062d565b9695505050505050565b60006000805160206107b5833981519152610371565b803b6105815760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b806000805160206107b58339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381166106185760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b80600080516020610795833981519152610592565b6060831561063c575081610285565b82511561064c5782518084602001fd5b8160405162461bcd60e51b81526004016103289190610735565b80356001600160a01b038116811461067d57600080fd5b919050565b600060208284031215610693578081fd5b61028582610666565b6000806000604084860312156106b0578182fd5b6106b984610666565b925060208401356001600160401b03808211156106d4578384fd5b818601915086601f8301126106e7578384fd5b8135818111156106f5578485fd5b876020828501011115610706578485fd5b6020830194508093505050509250925092565b6000825161072b818460208701610768565b9190910192915050565b6020815260008251806020840152610754816040850160208701610768565b601f01601f19169190910160400192915050565b60005b8381101561078357818101518382015260200161076b565b838111156103d9575050600091015256feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220834feeba798ffeacd61d277e2e2e474f2b7d3b5c3c506bf659be3c5ef6046bdb64736f6c63430008040033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207a3aa4cede4f204819a6c258377d3f3afbfbe40216c83c42c9f9e74d54194e0464736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200006a5760003560e01c806335ff0aef146200006f57806362832955146200009e57806382f9340914620000c557806383b9a00914620000ec578063c31011cc1462000113578063d2c598b5146200012a575b600080fd5b6200008662000080366004620006f0565b62000151565b60405162000095919062000969565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000062000086565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b6200008662000124366004620006ca565b6200046a565b7f000000000000000000000000000000000000000000000000000000000000000062000086565b600080604051620001629062000665565b604051809103906000f0801580156200017f573d6000803e3d6000fd5b5090506000620001b07f0000000000000000000000000000000000000000000000000000000000000000836200049e565b60405163f2fde38b60e01b81529091506001600160a01b0383169063f2fde38b90620001e190849060040162000969565b600060405180830381600087803b158015620001fc57600080fd5b505af115801562000211573d6000803e3d6000fd5b5050604051636815f33760e01b81526001600160a01b0384169250636815f337915062000251908d908d908c908c908c908c908b903390600401620009c3565b600060405180830381600087803b1580156200026c57600080fd5b505af115801562000281573d6000803e3d6000fd5b5050505060006200030c896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620002c557600080fd5b505afa158015620002da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003049190810190620007a9565b8385620004fb565b90506000620003958a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200034e57600080fd5b505afa15801562000363573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200038d9190810190620007a9565b8486620005ea565b60405163ef1f9f3960e01b81526001600160a01b038c81166004830152848116602483015280831660448301529192509084169063ef1f9f3990606401600060405180830381600087803b158015620003ed57600080fd5b505af115801562000402573d6000803e3d6000fd5b505050505050876001600160a01b0316336001600160a01b03167faf94cde051ff1210197fe31203f2210a396ffd110ab74cf8014d6bfd600842d58c8c8b8b87604051620004559594939291906200097d565b60405180910390a39998505050505050505050565b6000620004987f0000000000000000000000000000000000000000000000000000000000000000836200049e565b92915050565b60008282604051620004b09062000673565b6001600160a01b03928316815291166020820152606060408201819052600090820152608001604051809103906000f080158015620004f3573d6000803e3d6000fd5b509392505050565b60008084604051602001620005119190620008b4565b60405160208183030381529060405290506000856040516020016200053791906200094b565b60405160208183030381529060405290506000620005767f0000000000000000000000000000000000000000000000000000000000000000866200049e565b6040516303bf912560e11b81529091506001600160a01b0382169063077f224a90620005ab90869086908b9060040162000a25565b600060405180830381600087803b158015620005c657600080fd5b505af1158015620005db573d6000803e3d6000fd5b50929998505050505050505050565b60008084604051602001620006009190620008ef565b604051602081830303815290604052905060008560405160200162000626919062000920565b60405160208183030381529060405290506000620005767f0000000000000000000000000000000000000000000000000000000000000000866200049e565b6107d28062000aca83390190565b610f0c806200129c83390190565b60008083601f84011262000693578182fd5b5081356001600160401b03811115620006aa578182fd5b602083019150836020828501011115620006c357600080fd5b9250929050565b600060208284031215620006dc578081fd5b8135620006e98162000ab0565b9392505050565b600080600080600080600060a0888a0312156200070b578283fd5b87356001600160401b038082111562000722578485fd5b620007308b838c0162000681565b909950975060208a01359150620007478262000ab0565b909550604089013590808211156200075d578485fd5b506200076c8a828b0162000681565b909550935050606088013561ffff8116811462000787578283fd5b91506080880135620007998162000ab0565b8091505092959891949750929550565b600060208284031215620007bb578081fd5b81516001600160401b0380821115620007d2578283fd5b818401915084601f830112620007e6578283fd5b815181811115620007fb57620007fb62000a9a565b604051601f8201601f19908116603f0116810190838211818310171562000826576200082662000a9a565b816040528281528760208487010111156200083f578586fd5b6200085283602083016020880162000a67565b979650505050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452620008a081602086016020860162000a67565b601f01601f19169290920160200192915050565b70024b73a32b932b9ba102132b0b934b7339607d1b815260008251620008e281601185016020870162000a67565b9190910160110192915050565b6602137b93937bb960cd1b8152600082516200091381600785016020870162000a67565b9190910160070192915050565b603160f91b8152600082516200093e81600185016020870162000a67565b9190910160010192915050565b606960f81b8152600082516200093e81600185016020870162000a67565b6001600160a01b0391909116815260200190565b606081526000620009936060830187896200085d565b8281036020840152620009a88186886200085d565b91505060018060a01b03831660408301529695505050505050565b60c081526000620009d960c083018a8c6200085d565b8281036020840152620009ee81898b6200085d565b61ffff97909716604084015250506001600160a01b039384166060820152918316608083015290911660a090910152949350505050565b60608152600062000a3a606083018662000886565b828103602084015262000a4e818662000886565b91505060018060a01b0383166040830152949350505050565b60005b8381101562000a8457818101518382015260200162000a6a565b8381111562000a94576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000ac657600080fd5b5056fe608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610771806100616000396000f3fe60806040526004361061006b5760003560e01c8063204e1c7a14610070578063715018a6146100a65780637eff275e146100bd5780638da5cb5b146100dd5780639623609d146100f257806399a88ec414610105578063f2fde38b14610125578063f3b7dead14610145575b600080fd5b34801561007c57600080fd5b5061009061008b3660046104fa565b610165565b60405161009d9190610641565b60405180910390f35b3480156100b257600080fd5b506100bb6101f6565b005b3480156100c957600080fd5b506100bb6100d8366004610539565b610266565b3480156100e957600080fd5b506100906102f7565b6100bb610100366004610571565b610306565b34801561011157600080fd5b506100bb610120366004610539565b61039c565b34801561013157600080fd5b506100bb6101403660046104fa565b6103f7565b34801561015157600080fd5b506100906101603660046104fa565b6104d4565b6000806000836001600160a01b031660405161018b90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b5091509150816101da57600080fd5b808060200190518101906101ee919061051d565b949350505050565b336101ff6102f7565b6001600160a01b03161461022e5760405162461bcd60e51b8152600401610225906106b8565b60405180910390fd5b600080546040516001600160a01b039091169060008051602061071c833981519152908390a3600080546001600160a01b0319169055565b3361026f6102f7565b6001600160a01b0316146102955760405162461bcd60e51b8152600401610225906106b8565b6040516308f2839760e41b81526001600160a01b03831690638f283970906102c1908490600401610641565b600060405180830381600087803b1580156102db57600080fd5b505af11580156102ef573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031690565b3361030f6102f7565b6001600160a01b0316146103355760405162461bcd60e51b8152600401610225906106b8565b60405163278f794360e11b81526001600160a01b03841690634f1ef2869034906103659086908690600401610655565b6000604051808303818588803b15801561037e57600080fd5b505af1158015610392573d6000803e3d6000fd5b5050505050505050565b336103a56102f7565b6001600160a01b0316146103cb5760405162461bcd60e51b8152600401610225906106b8565b604051631b2ce7f360e11b81526001600160a01b03831690633659cfe6906102c1908490600401610641565b336104006102f7565b6001600160a01b0316146104265760405162461bcd60e51b8152600401610225906106b8565b6001600160a01b03811661048b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610225565b600080546040516001600160a01b038085169392169160008051602061071c83398151915291a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b031660405161018b906303e1469160e61b815260040190565b60006020828403121561050b578081fd5b813561051681610703565b9392505050565b60006020828403121561052e578081fd5b815161051681610703565b6000806040838503121561054b578081fd5b823561055681610703565b9150602083013561056681610703565b809150509250929050565b600080600060608486031215610585578081fd5b833561059081610703565b925060208401356105a081610703565b915060408401356001600160401b03808211156105bb578283fd5b818601915086601f8301126105ce578283fd5b8135818111156105e0576105e06106ed565b604051601f8201601f19908116603f01168101908382118183101715610608576106086106ed565b81604052828152896020848701011115610620578586fd5b82602086016020830137856020848301015280955050505050509250925092565b6001600160a01b0391909116815260200190565b60018060a01b0383168152600060206040818401528351806040850152825b8181101561069057858101830151858201606001528201610674565b818111156106a15783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071857600080fd5b5056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a26469706673582212209f58ddf2e62e932313ef03a43663de644f281755cb24cf59c7579808f4a16aa264736f6c63430008040033608060405260405162000f0c38038062000f0c8339810160408190526200002691620004cc565b82816200005560017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd620005fb565b60008051602062000ec5833981519152146200008157634e487b7160e01b600052600160045260246000fd5b6200008f82826000620000ff565b50620000bf905060017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6104620005fb565b60008051602062000ea583398151915214620000eb57634e487b7160e01b600052600160045260246000fd5b620000f68262000170565b50505062000664565b6200010a83620001cb565b6040516001600160a01b038416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a26000825111806200014c5750805b156200016b576200016983836200029360201b620002601760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6200019b620002c2565b604080516001600160a01b03928316815291841660208301520160405180910390a1620001c881620002fb565b50565b620001e1816200038b60201b6200028c1760201c565b620002495760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806200027260008051602062000ec583398151915260001b6200039160201b620002081760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060620002bb838360405180606001604052806027815260200162000ee56027913962000394565b9392505050565b6000620002ec60008051602062000ea583398151915260001b6200039160201b620002081760201c565b546001600160a01b0316919050565b6001600160a01b038116620003625760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b606482015260840162000240565b806200027260008051602062000ea583398151915260001b6200039160201b620002081760201c565b3b151590565b90565b6060833b620003f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840162000240565b600080856001600160a01b031685604051620004129190620005a8565b600060405180830381855af49150503d80600081146200044f576040519150601f19603f3d011682016040523d82523d6000602084013e62000454565b606091505b5090925090506200046782828662000471565b9695505050505050565b6060831562000482575081620002bb565b825115620004935782518084602001fd5b8160405162461bcd60e51b8152600401620002409190620005c6565b80516001600160a01b0381168114620004c757600080fd5b919050565b600080600060608486031215620004e1578283fd5b620004ec84620004af565b9250620004fc60208501620004af565b60408501519092506001600160401b038082111562000519578283fd5b818601915086601f8301126200052d578283fd5b8151818111156200054257620005426200064e565b604051601f8201601f19908116603f011681019083821181831017156200056d576200056d6200064e565b8160405282815289602084870101111562000586578586fd5b620005998360208301602088016200061f565b80955050505050509250925092565b60008251620005bc8184602087016200061f565b9190910192915050565b6020815260008251806020840152620005e78160408501602087016200061f565b601f01601f19169190910160400192915050565b6000828210156200061a57634e487b7160e01b81526011600452602481fd5b500390565b60005b838110156200063c57818101518382015260200162000622565b83811115620001695750506000910152565b634e487b7160e01b600052604160045260246000fd5b61083180620006746000396000f3fe60806040526004361061004e5760003560e01c80633659cfe6146100655780634f1ef286146100855780635c60da1b146100985780638f283970146100c9578063f851a440146100e95761005d565b3661005d5761005b6100fe565b005b61005b6100fe565b34801561007157600080fd5b5061005b610080366004610682565b610118565b61005b61009336600461069c565b61015f565b3480156100a457600080fd5b506100ad6101d0565b6040516001600160a01b03909116815260200160405180910390f35b3480156100d557600080fd5b5061005b6100e4366004610682565b61020b565b3480156100f557600080fd5b506100ad610235565b610106610292565b610116610111610331565b61033b565b565b61012061035f565b6001600160a01b0316336001600160a01b031614156101575761015481604051806020016040528060008152506000610380565b50565b6101546100fe565b61016761035f565b6001600160a01b0316336001600160a01b031614156101c8576101c38383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525060019250610380915050565b505050565b6101c36100fe565b60006101da61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb610331565b905090565b6102086100fe565b90565b61021361035f565b6001600160a01b0316336001600160a01b0316141561015757610154816103df565b600061023f61035f565b6001600160a01b0316336001600160a01b03161415610200576101fb61035f565b606061028583836040518060600160405280602781526020016107d560279139610433565b9392505050565b3b151590565b61029a61035f565b6001600160a01b0316336001600160a01b031614156101165760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f78792074617267606482015261195d60f21b608482015260a4015b60405180910390fd5b60006101fb610507565b3660008037600080366000845af43d6000803e80801561035a573d6000f35b3d6000fd5b60006000805160206107958339815191525b546001600160a01b0316919050565b6103898361051d565b6040516001600160a01b038416907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a26000825111806103ca5750805b156101c3576103d98383610260565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f61040861035f565b604080516001600160a01b03928316815291841660208301520160405180910390a1610154816105b3565b6060833b6104925760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610328565b600080856001600160a01b0316856040516104ad9190610719565b600060405180830381855af49150503d80600081146104e8576040519150601f19603f3d011682016040523d82523d6000602084013e6104ed565b606091505b50915091506104fd82828661062d565b9695505050505050565b60006000805160206107b5833981519152610371565b803b6105815760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610328565b806000805160206107b58339815191525b80546001600160a01b0319166001600160a01b039290921691909117905550565b6001600160a01b0381166106185760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152608401610328565b80600080516020610795833981519152610592565b6060831561063c575081610285565b82511561064c5782518084602001fd5b8160405162461bcd60e51b81526004016103289190610735565b80356001600160a01b038116811461067d57600080fd5b919050565b600060208284031215610693578081fd5b61028582610666565b6000806000604084860312156106b0578182fd5b6106b984610666565b925060208401356001600160401b03808211156106d4578384fd5b818601915086601f8301126106e7578384fd5b8135818111156106f5578485fd5b876020828501011115610706578485fd5b6020830194508093505050509250925092565b6000825161072b818460208701610768565b9190910192915050565b6020815260008251806020840152610754816040850160208701610768565b601f01601f19169190910160400192915050565b60005b8381101561078357818101518382015260200161076b565b838111156103d9575050600091015256feb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220834feeba798ffeacd61d277e2e2e474f2b7d3b5c3c506bf659be3c5ef6046bdb64736f6c63430008040033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207a3aa4cede4f204819a6c258377d3f3afbfbe40216c83c42c9f9e74d54194e0464736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}